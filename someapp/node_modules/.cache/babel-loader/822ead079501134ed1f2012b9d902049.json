{"ast":null,"code":"import { frame } from 'motion-dom';\nimport { makeUseVisualState } from '../../motion/utils/use-visual-state.mjs';\nimport { transformProps } from '../html/utils/keys-transform.mjs';\nimport { buildSVGAttrs } from './utils/build-attrs.mjs';\nimport { createSvgRenderState } from './utils/create-render-state.mjs';\nimport { isSVGTag } from './utils/is-svg-tag.mjs';\nimport { updateSVGDimensions } from './utils/measure.mjs';\nimport { renderSVG } from './utils/render.mjs';\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\nconst layoutProps = [\"x\", \"y\", \"width\", \"height\", \"cx\", \"cy\", \"r\"];\nconst svgMotionConfig = {\n  useVisualState: makeUseVisualState({\n    scrapeMotionValuesFromProps: scrapeMotionValuesFromProps,\n    createRenderState: createSvgRenderState,\n    onUpdate: _ref => {\n      let {\n        props,\n        prevProps,\n        current,\n        renderState,\n        latestValues\n      } = _ref;\n      if (!current) return;\n      let hasTransform = !!props.drag;\n\n      if (!hasTransform) {\n        for (const key in latestValues) {\n          if (transformProps.has(key)) {\n            hasTransform = true;\n            break;\n          }\n        }\n      }\n\n      if (!hasTransform) return;\n      let needsMeasure = !prevProps;\n\n      if (prevProps) {\n        /**\n         * Check the layout props for changes, if any are found we need to\n         * measure the element again.\n         */\n        for (let i = 0; i < layoutProps.length; i++) {\n          const key = layoutProps[i];\n\n          if (props[key] !== prevProps[key]) {\n            needsMeasure = true;\n          }\n        }\n      }\n\n      if (!needsMeasure) return;\n      frame.read(() => {\n        updateSVGDimensions(current, renderState);\n        frame.render(() => {\n          buildSVGAttrs(renderState, latestValues, isSVGTag(current.tagName), props.transformTemplate);\n          renderSVG(current, renderState);\n        });\n      });\n    }\n  })\n};\nexport { svgMotionConfig };","map":{"version":3,"sources":["/Users/gagan/Desktop/sanjeev/someapp/node_modules/framer-motion/dist/es/render/svg/config-motion.mjs"],"names":["frame","makeUseVisualState","transformProps","buildSVGAttrs","createSvgRenderState","isSVGTag","updateSVGDimensions","renderSVG","scrapeMotionValuesFromProps","layoutProps","svgMotionConfig","useVisualState","createRenderState","onUpdate","props","prevProps","current","renderState","latestValues","hasTransform","drag","key","has","needsMeasure","i","length","read","render","tagName","transformTemplate"],"mappings":"AAAA,SAASA,KAAT,QAAsB,YAAtB;AACA,SAASC,kBAAT,QAAmC,yCAAnC;AACA,SAASC,cAAT,QAA+B,kCAA/B;AACA,SAASC,aAAT,QAA8B,yBAA9B;AACA,SAASC,oBAAT,QAAqC,iCAArC;AACA,SAASC,QAAT,QAAyB,wBAAzB;AACA,SAASC,mBAAT,QAAoC,qBAApC;AACA,SAASC,SAAT,QAA0B,oBAA1B;AACA,SAASC,2BAAT,QAA4C,kCAA5C;AAEA,MAAMC,WAAW,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,OAAX,EAAoB,QAApB,EAA8B,IAA9B,EAAoC,IAApC,EAA0C,GAA1C,CAApB;AACA,MAAMC,eAAe,GAAG;AACpBC,EAAAA,cAAc,EAAEV,kBAAkB,CAAC;AAC/BO,IAAAA,2BAA2B,EAAEA,2BADE;AAE/BI,IAAAA,iBAAiB,EAAER,oBAFY;AAG/BS,IAAAA,QAAQ,EAAE,QAA+D;AAAA,UAA9D;AAAEC,QAAAA,KAAF;AAASC,QAAAA,SAAT;AAAoBC,QAAAA,OAApB;AAA6BC,QAAAA,WAA7B;AAA0CC,QAAAA;AAA1C,OAA8D;AACrE,UAAI,CAACF,OAAL,EACI;AACJ,UAAIG,YAAY,GAAG,CAAC,CAACL,KAAK,CAACM,IAA3B;;AACA,UAAI,CAACD,YAAL,EAAmB;AACf,aAAK,MAAME,GAAX,IAAkBH,YAAlB,EAAgC;AAC5B,cAAIhB,cAAc,CAACoB,GAAf,CAAmBD,GAAnB,CAAJ,EAA6B;AACzBF,YAAAA,YAAY,GAAG,IAAf;AACA;AACH;AACJ;AACJ;;AACD,UAAI,CAACA,YAAL,EACI;AACJ,UAAII,YAAY,GAAG,CAACR,SAApB;;AACA,UAAIA,SAAJ,EAAe;AACX;AAChB;AACA;AACA;AACgB,aAAK,IAAIS,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGf,WAAW,CAACgB,MAAhC,EAAwCD,CAAC,EAAzC,EAA6C;AACzC,gBAAMH,GAAG,GAAGZ,WAAW,CAACe,CAAD,CAAvB;;AACA,cAAIV,KAAK,CAACO,GAAD,CAAL,KACAN,SAAS,CAACM,GAAD,CADb,EACoB;AAChBE,YAAAA,YAAY,GAAG,IAAf;AACH;AACJ;AACJ;;AACD,UAAI,CAACA,YAAL,EACI;AACJvB,MAAAA,KAAK,CAAC0B,IAAN,CAAW,MAAM;AACbpB,QAAAA,mBAAmB,CAACU,OAAD,EAAUC,WAAV,CAAnB;AACAjB,QAAAA,KAAK,CAAC2B,MAAN,CAAa,MAAM;AACfxB,UAAAA,aAAa,CAACc,WAAD,EAAcC,YAAd,EAA4Bb,QAAQ,CAACW,OAAO,CAACY,OAAT,CAApC,EAAuDd,KAAK,CAACe,iBAA7D,CAAb;AACAtB,UAAAA,SAAS,CAACS,OAAD,EAAUC,WAAV,CAAT;AACH,SAHD;AAIH,OAND;AAOH;AAxC8B,GAAD;AADd,CAAxB;AA6CA,SAASP,eAAT","sourcesContent":["import { frame } from 'motion-dom';\nimport { makeUseVisualState } from '../../motion/utils/use-visual-state.mjs';\nimport { transformProps } from '../html/utils/keys-transform.mjs';\nimport { buildSVGAttrs } from './utils/build-attrs.mjs';\nimport { createSvgRenderState } from './utils/create-render-state.mjs';\nimport { isSVGTag } from './utils/is-svg-tag.mjs';\nimport { updateSVGDimensions } from './utils/measure.mjs';\nimport { renderSVG } from './utils/render.mjs';\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\n\nconst layoutProps = [\"x\", \"y\", \"width\", \"height\", \"cx\", \"cy\", \"r\"];\nconst svgMotionConfig = {\n    useVisualState: makeUseVisualState({\n        scrapeMotionValuesFromProps: scrapeMotionValuesFromProps,\n        createRenderState: createSvgRenderState,\n        onUpdate: ({ props, prevProps, current, renderState, latestValues, }) => {\n            if (!current)\n                return;\n            let hasTransform = !!props.drag;\n            if (!hasTransform) {\n                for (const key in latestValues) {\n                    if (transformProps.has(key)) {\n                        hasTransform = true;\n                        break;\n                    }\n                }\n            }\n            if (!hasTransform)\n                return;\n            let needsMeasure = !prevProps;\n            if (prevProps) {\n                /**\n                 * Check the layout props for changes, if any are found we need to\n                 * measure the element again.\n                 */\n                for (let i = 0; i < layoutProps.length; i++) {\n                    const key = layoutProps[i];\n                    if (props[key] !==\n                        prevProps[key]) {\n                        needsMeasure = true;\n                    }\n                }\n            }\n            if (!needsMeasure)\n                return;\n            frame.read(() => {\n                updateSVGDimensions(current, renderState);\n                frame.render(() => {\n                    buildSVGAttrs(renderState, latestValues, isSVGTag(current.tagName), props.transformTemplate);\n                    renderSVG(current, renderState);\n                });\n            });\n        },\n    }),\n};\n\nexport { svgMotionConfig };\n"]},"metadata":{},"sourceType":"module"}