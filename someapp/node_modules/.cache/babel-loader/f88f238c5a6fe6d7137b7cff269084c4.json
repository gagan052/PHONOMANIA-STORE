{"ast":null,"code":"import { extractEventInfo } from '../events/event-info.mjs';\nimport { addDomEvent } from '../events/add-dom-event.mjs';\nimport { addPointerEvent } from '../events/add-pointer-event.mjs';\nimport { Feature } from '../motion/features/Feature.mjs';\nimport { pipe } from '../utils/pipe.mjs';\nimport { isDragActive } from './drag/utils/lock.mjs';\nimport { isNodeOrChild } from './utils/is-node-or-child.mjs';\nimport { noop } from '../utils/noop.mjs';\n\nfunction fireSyntheticPointerEvent(name, handler) {\n  if (!handler) return;\n  const syntheticPointerEvent = new PointerEvent(\"pointer\" + name);\n  handler(syntheticPointerEvent, extractEventInfo(syntheticPointerEvent));\n}\n\nclass PressGesture extends Feature {\n  constructor() {\n    super(...arguments);\n    this.removeStartListeners = noop;\n    this.removeEndListeners = noop;\n    this.removeAccessibleListeners = noop;\n\n    this.startPointerPress = (startEvent, startInfo) => {\n      this.removeEndListeners();\n      if (this.isPressing) return;\n      const props = this.node.getProps();\n\n      const endPointerPress = (endEvent, endInfo) => {\n        if (!this.checkPressEnd()) return;\n        const {\n          onTap,\n          onTapCancel\n        } = this.node.getProps();\n        /**\n         * We only count this as a tap gesture if the event.target is the same\n         * as, or a child of, this component's element\n         */\n\n        !isNodeOrChild(this.node.current, endEvent.target) ? onTapCancel && onTapCancel(endEvent, endInfo) : onTap && onTap(endEvent, endInfo);\n      };\n\n      const removePointerUpListener = addPointerEvent(window, \"pointerup\", endPointerPress, {\n        passive: !(props.onTap || props[\"onPointerUp\"])\n      });\n      const removePointerCancelListener = addPointerEvent(window, \"pointercancel\", (cancelEvent, cancelInfo) => this.cancelPress(cancelEvent, cancelInfo), {\n        passive: !(props.onTapCancel || props[\"onPointerCancel\"])\n      });\n      this.removeEndListeners = pipe(removePointerUpListener, removePointerCancelListener);\n      this.startPress(startEvent, startInfo);\n    };\n\n    this.startAccessiblePress = () => {\n      const handleKeydown = keydownEvent => {\n        if (keydownEvent.key !== \"Enter\" || this.isPressing) return;\n\n        const handleKeyup = keyupEvent => {\n          if (keyupEvent.key !== \"Enter\" || !this.checkPressEnd()) return;\n          fireSyntheticPointerEvent(\"up\", this.node.getProps().onTap);\n        };\n\n        this.removeEndListeners();\n        this.removeEndListeners = addDomEvent(this.node.current, \"keyup\", handleKeyup);\n        fireSyntheticPointerEvent(\"down\", (event, info) => {\n          this.startPress(event, info);\n        });\n      };\n\n      const removeKeydownListener = addDomEvent(this.node.current, \"keydown\", handleKeydown);\n\n      const handleBlur = () => {\n        if (!this.isPressing) return;\n        fireSyntheticPointerEvent(\"cancel\", (cancelEvent, cancelInfo) => this.cancelPress(cancelEvent, cancelInfo));\n      };\n\n      const removeBlurListener = addDomEvent(this.node.current, \"blur\", handleBlur);\n      this.removeAccessibleListeners = pipe(removeKeydownListener, removeBlurListener);\n    };\n  }\n\n  startPress(event, info) {\n    this.isPressing = true;\n    const {\n      onTapStart,\n      whileTap\n    } = this.node.getProps();\n    /**\n     * Ensure we trigger animations before firing event callback\n     */\n\n    if (whileTap && this.node.animationState) {\n      this.node.animationState.setActive(\"whileTap\", true);\n    }\n\n    onTapStart && onTapStart(event, info);\n  }\n\n  checkPressEnd() {\n    this.removeEndListeners();\n    this.isPressing = false;\n    const props = this.node.getProps();\n\n    if (props.whileTap && this.node.animationState) {\n      this.node.animationState.setActive(\"whileTap\", false);\n    }\n\n    return !isDragActive();\n  }\n\n  cancelPress(event, info) {\n    if (!this.checkPressEnd()) return;\n    const {\n      onTapCancel\n    } = this.node.getProps();\n    onTapCancel && onTapCancel(event, info);\n  }\n\n  mount() {\n    const props = this.node.getProps();\n    const removePointerListener = addPointerEvent(this.node.current, \"pointerdown\", this.startPointerPress, {\n      passive: !(props.onTapStart || props[\"onPointerStart\"])\n    });\n    const removeFocusListener = addDomEvent(this.node.current, \"focus\", this.startAccessiblePress);\n    this.removeStartListeners = pipe(removePointerListener, removeFocusListener);\n  }\n\n  unmount() {\n    this.removeStartListeners();\n    this.removeEndListeners();\n    this.removeAccessibleListeners();\n  }\n\n}\n\nexport { PressGesture };","map":{"version":3,"sources":["/Users/gagan/Desktop/sanjeev/someapp/node_modules/framer-motion/dist/es/gestures/press.mjs"],"names":["extractEventInfo","addDomEvent","addPointerEvent","Feature","pipe","isDragActive","isNodeOrChild","noop","fireSyntheticPointerEvent","name","handler","syntheticPointerEvent","PointerEvent","PressGesture","constructor","arguments","removeStartListeners","removeEndListeners","removeAccessibleListeners","startPointerPress","startEvent","startInfo","isPressing","props","node","getProps","endPointerPress","endEvent","endInfo","checkPressEnd","onTap","onTapCancel","current","target","removePointerUpListener","window","passive","removePointerCancelListener","cancelEvent","cancelInfo","cancelPress","startPress","startAccessiblePress","handleKeydown","keydownEvent","key","handleKeyup","keyupEvent","event","info","removeKeydownListener","handleBlur","removeBlurListener","onTapStart","whileTap","animationState","setActive","mount","removePointerListener","removeFocusListener","unmount"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,0BAAjC;AACA,SAASC,WAAT,QAA4B,6BAA5B;AACA,SAASC,eAAT,QAAgC,iCAAhC;AACA,SAASC,OAAT,QAAwB,gCAAxB;AACA,SAASC,IAAT,QAAqB,mBAArB;AACA,SAASC,YAAT,QAA6B,uBAA7B;AACA,SAASC,aAAT,QAA8B,8BAA9B;AACA,SAASC,IAAT,QAAqB,mBAArB;;AAEA,SAASC,yBAAT,CAAmCC,IAAnC,EAAyCC,OAAzC,EAAkD;AAC9C,MAAI,CAACA,OAAL,EACI;AACJ,QAAMC,qBAAqB,GAAG,IAAIC,YAAJ,CAAiB,YAAYH,IAA7B,CAA9B;AACAC,EAAAA,OAAO,CAACC,qBAAD,EAAwBX,gBAAgB,CAACW,qBAAD,CAAxC,CAAP;AACH;;AACD,MAAME,YAAN,SAA2BV,OAA3B,CAAmC;AAC/BW,EAAAA,WAAW,GAAG;AACV,UAAM,GAAGC,SAAT;AACA,SAAKC,oBAAL,GAA4BT,IAA5B;AACA,SAAKU,kBAAL,GAA0BV,IAA1B;AACA,SAAKW,yBAAL,GAAiCX,IAAjC;;AACA,SAAKY,iBAAL,GAAyB,CAACC,UAAD,EAAaC,SAAb,KAA2B;AAChD,WAAKJ,kBAAL;AACA,UAAI,KAAKK,UAAT,EACI;AACJ,YAAMC,KAAK,GAAG,KAAKC,IAAL,CAAUC,QAAV,EAAd;;AACA,YAAMC,eAAe,GAAG,CAACC,QAAD,EAAWC,OAAX,KAAuB;AAC3C,YAAI,CAAC,KAAKC,aAAL,EAAL,EACI;AACJ,cAAM;AAAEC,UAAAA,KAAF;AAASC,UAAAA;AAAT,YAAyB,KAAKP,IAAL,CAAUC,QAAV,EAA/B;AACA;AAChB;AACA;AACA;;AACgB,SAACnB,aAAa,CAAC,KAAKkB,IAAL,CAAUQ,OAAX,EAAoBL,QAAQ,CAACM,MAA7B,CAAd,GACMF,WAAW,IAAIA,WAAW,CAACJ,QAAD,EAAWC,OAAX,CADhC,GAEME,KAAK,IAAIA,KAAK,CAACH,QAAD,EAAWC,OAAX,CAFpB;AAGH,OAXD;;AAYA,YAAMM,uBAAuB,GAAGhC,eAAe,CAACiC,MAAD,EAAS,WAAT,EAAsBT,eAAtB,EAAuC;AAAEU,QAAAA,OAAO,EAAE,EAAEb,KAAK,CAACO,KAAN,IAAeP,KAAK,CAAC,aAAD,CAAtB;AAAX,OAAvC,CAA/C;AACA,YAAMc,2BAA2B,GAAGnC,eAAe,CAACiC,MAAD,EAAS,eAAT,EAA0B,CAACG,WAAD,EAAcC,UAAd,KAA6B,KAAKC,WAAL,CAAiBF,WAAjB,EAA8BC,UAA9B,CAAvD,EAAkG;AAAEH,QAAAA,OAAO,EAAE,EAAEb,KAAK,CAACQ,WAAN,IAAqBR,KAAK,CAAC,iBAAD,CAA5B;AAAX,OAAlG,CAAnD;AACA,WAAKN,kBAAL,GAA0Bb,IAAI,CAAC8B,uBAAD,EAA0BG,2BAA1B,CAA9B;AACA,WAAKI,UAAL,CAAgBrB,UAAhB,EAA4BC,SAA5B;AACH,KArBD;;AAsBA,SAAKqB,oBAAL,GAA4B,MAAM;AAC9B,YAAMC,aAAa,GAAIC,YAAD,IAAkB;AACpC,YAAIA,YAAY,CAACC,GAAb,KAAqB,OAArB,IAAgC,KAAKvB,UAAzC,EACI;;AACJ,cAAMwB,WAAW,GAAIC,UAAD,IAAgB;AAChC,cAAIA,UAAU,CAACF,GAAX,KAAmB,OAAnB,IAA8B,CAAC,KAAKhB,aAAL,EAAnC,EACI;AACJrB,UAAAA,yBAAyB,CAAC,IAAD,EAAO,KAAKgB,IAAL,CAAUC,QAAV,GAAqBK,KAA5B,CAAzB;AACH,SAJD;;AAKA,aAAKb,kBAAL;AACA,aAAKA,kBAAL,GAA0BhB,WAAW,CAAC,KAAKuB,IAAL,CAAUQ,OAAX,EAAoB,OAApB,EAA6Bc,WAA7B,CAArC;AACAtC,QAAAA,yBAAyB,CAAC,MAAD,EAAS,CAACwC,KAAD,EAAQC,IAAR,KAAiB;AAC/C,eAAKR,UAAL,CAAgBO,KAAhB,EAAuBC,IAAvB;AACH,SAFwB,CAAzB;AAGH,OAbD;;AAcA,YAAMC,qBAAqB,GAAGjD,WAAW,CAAC,KAAKuB,IAAL,CAAUQ,OAAX,EAAoB,SAApB,EAA+BW,aAA/B,CAAzC;;AACA,YAAMQ,UAAU,GAAG,MAAM;AACrB,YAAI,CAAC,KAAK7B,UAAV,EACI;AACJd,QAAAA,yBAAyB,CAAC,QAAD,EAAW,CAAC8B,WAAD,EAAcC,UAAd,KAA6B,KAAKC,WAAL,CAAiBF,WAAjB,EAA8BC,UAA9B,CAAxC,CAAzB;AACH,OAJD;;AAKA,YAAMa,kBAAkB,GAAGnD,WAAW,CAAC,KAAKuB,IAAL,CAAUQ,OAAX,EAAoB,MAApB,EAA4BmB,UAA5B,CAAtC;AACA,WAAKjC,yBAAL,GAAiCd,IAAI,CAAC8C,qBAAD,EAAwBE,kBAAxB,CAArC;AACH,KAvBD;AAwBH;;AACDX,EAAAA,UAAU,CAACO,KAAD,EAAQC,IAAR,EAAc;AACpB,SAAK3B,UAAL,GAAkB,IAAlB;AACA,UAAM;AAAE+B,MAAAA,UAAF;AAAcC,MAAAA;AAAd,QAA2B,KAAK9B,IAAL,CAAUC,QAAV,EAAjC;AACA;AACR;AACA;;AACQ,QAAI6B,QAAQ,IAAI,KAAK9B,IAAL,CAAU+B,cAA1B,EAA0C;AACtC,WAAK/B,IAAL,CAAU+B,cAAV,CAAyBC,SAAzB,CAAmC,UAAnC,EAA+C,IAA/C;AACH;;AACDH,IAAAA,UAAU,IAAIA,UAAU,CAACL,KAAD,EAAQC,IAAR,CAAxB;AACH;;AACDpB,EAAAA,aAAa,GAAG;AACZ,SAAKZ,kBAAL;AACA,SAAKK,UAAL,GAAkB,KAAlB;AACA,UAAMC,KAAK,GAAG,KAAKC,IAAL,CAAUC,QAAV,EAAd;;AACA,QAAIF,KAAK,CAAC+B,QAAN,IAAkB,KAAK9B,IAAL,CAAU+B,cAAhC,EAAgD;AAC5C,WAAK/B,IAAL,CAAU+B,cAAV,CAAyBC,SAAzB,CAAmC,UAAnC,EAA+C,KAA/C;AACH;;AACD,WAAO,CAACnD,YAAY,EAApB;AACH;;AACDmC,EAAAA,WAAW,CAACQ,KAAD,EAAQC,IAAR,EAAc;AACrB,QAAI,CAAC,KAAKpB,aAAL,EAAL,EACI;AACJ,UAAM;AAAEE,MAAAA;AAAF,QAAkB,KAAKP,IAAL,CAAUC,QAAV,EAAxB;AACAM,IAAAA,WAAW,IAAIA,WAAW,CAACiB,KAAD,EAAQC,IAAR,CAA1B;AACH;;AACDQ,EAAAA,KAAK,GAAG;AACJ,UAAMlC,KAAK,GAAG,KAAKC,IAAL,CAAUC,QAAV,EAAd;AACA,UAAMiC,qBAAqB,GAAGxD,eAAe,CAAC,KAAKsB,IAAL,CAAUQ,OAAX,EAAoB,aAApB,EAAmC,KAAKb,iBAAxC,EAA2D;AAAEiB,MAAAA,OAAO,EAAE,EAAEb,KAAK,CAAC8B,UAAN,IAAoB9B,KAAK,CAAC,gBAAD,CAA3B;AAAX,KAA3D,CAA7C;AACA,UAAMoC,mBAAmB,GAAG1D,WAAW,CAAC,KAAKuB,IAAL,CAAUQ,OAAX,EAAoB,OAApB,EAA6B,KAAKU,oBAAlC,CAAvC;AACA,SAAK1B,oBAAL,GAA4BZ,IAAI,CAACsD,qBAAD,EAAwBC,mBAAxB,CAAhC;AACH;;AACDC,EAAAA,OAAO,GAAG;AACN,SAAK5C,oBAAL;AACA,SAAKC,kBAAL;AACA,SAAKC,yBAAL;AACH;;AAzF8B;;AA4FnC,SAASL,YAAT","sourcesContent":["import { extractEventInfo } from '../events/event-info.mjs';\nimport { addDomEvent } from '../events/add-dom-event.mjs';\nimport { addPointerEvent } from '../events/add-pointer-event.mjs';\nimport { Feature } from '../motion/features/Feature.mjs';\nimport { pipe } from '../utils/pipe.mjs';\nimport { isDragActive } from './drag/utils/lock.mjs';\nimport { isNodeOrChild } from './utils/is-node-or-child.mjs';\nimport { noop } from '../utils/noop.mjs';\n\nfunction fireSyntheticPointerEvent(name, handler) {\n    if (!handler)\n        return;\n    const syntheticPointerEvent = new PointerEvent(\"pointer\" + name);\n    handler(syntheticPointerEvent, extractEventInfo(syntheticPointerEvent));\n}\nclass PressGesture extends Feature {\n    constructor() {\n        super(...arguments);\n        this.removeStartListeners = noop;\n        this.removeEndListeners = noop;\n        this.removeAccessibleListeners = noop;\n        this.startPointerPress = (startEvent, startInfo) => {\n            this.removeEndListeners();\n            if (this.isPressing)\n                return;\n            const props = this.node.getProps();\n            const endPointerPress = (endEvent, endInfo) => {\n                if (!this.checkPressEnd())\n                    return;\n                const { onTap, onTapCancel } = this.node.getProps();\n                /**\n                 * We only count this as a tap gesture if the event.target is the same\n                 * as, or a child of, this component's element\n                 */\n                !isNodeOrChild(this.node.current, endEvent.target)\n                    ? onTapCancel && onTapCancel(endEvent, endInfo)\n                    : onTap && onTap(endEvent, endInfo);\n            };\n            const removePointerUpListener = addPointerEvent(window, \"pointerup\", endPointerPress, { passive: !(props.onTap || props[\"onPointerUp\"]) });\n            const removePointerCancelListener = addPointerEvent(window, \"pointercancel\", (cancelEvent, cancelInfo) => this.cancelPress(cancelEvent, cancelInfo), { passive: !(props.onTapCancel || props[\"onPointerCancel\"]) });\n            this.removeEndListeners = pipe(removePointerUpListener, removePointerCancelListener);\n            this.startPress(startEvent, startInfo);\n        };\n        this.startAccessiblePress = () => {\n            const handleKeydown = (keydownEvent) => {\n                if (keydownEvent.key !== \"Enter\" || this.isPressing)\n                    return;\n                const handleKeyup = (keyupEvent) => {\n                    if (keyupEvent.key !== \"Enter\" || !this.checkPressEnd())\n                        return;\n                    fireSyntheticPointerEvent(\"up\", this.node.getProps().onTap);\n                };\n                this.removeEndListeners();\n                this.removeEndListeners = addDomEvent(this.node.current, \"keyup\", handleKeyup);\n                fireSyntheticPointerEvent(\"down\", (event, info) => {\n                    this.startPress(event, info);\n                });\n            };\n            const removeKeydownListener = addDomEvent(this.node.current, \"keydown\", handleKeydown);\n            const handleBlur = () => {\n                if (!this.isPressing)\n                    return;\n                fireSyntheticPointerEvent(\"cancel\", (cancelEvent, cancelInfo) => this.cancelPress(cancelEvent, cancelInfo));\n            };\n            const removeBlurListener = addDomEvent(this.node.current, \"blur\", handleBlur);\n            this.removeAccessibleListeners = pipe(removeKeydownListener, removeBlurListener);\n        };\n    }\n    startPress(event, info) {\n        this.isPressing = true;\n        const { onTapStart, whileTap } = this.node.getProps();\n        /**\n         * Ensure we trigger animations before firing event callback\n         */\n        if (whileTap && this.node.animationState) {\n            this.node.animationState.setActive(\"whileTap\", true);\n        }\n        onTapStart && onTapStart(event, info);\n    }\n    checkPressEnd() {\n        this.removeEndListeners();\n        this.isPressing = false;\n        const props = this.node.getProps();\n        if (props.whileTap && this.node.animationState) {\n            this.node.animationState.setActive(\"whileTap\", false);\n        }\n        return !isDragActive();\n    }\n    cancelPress(event, info) {\n        if (!this.checkPressEnd())\n            return;\n        const { onTapCancel } = this.node.getProps();\n        onTapCancel && onTapCancel(event, info);\n    }\n    mount() {\n        const props = this.node.getProps();\n        const removePointerListener = addPointerEvent(this.node.current, \"pointerdown\", this.startPointerPress, { passive: !(props.onTapStart || props[\"onPointerStart\"]) });\n        const removeFocusListener = addDomEvent(this.node.current, \"focus\", this.startAccessiblePress);\n        this.removeStartListeners = pipe(removePointerListener, removeFocusListener);\n    }\n    unmount() {\n        this.removeStartListeners();\n        this.removeEndListeners();\n        this.removeAccessibleListeners();\n    }\n}\n\nexport { PressGesture };\n"]},"metadata":{},"sourceType":"module"}