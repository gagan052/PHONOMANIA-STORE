{"ast":null,"code":"import { setTarget } from './setters.mjs';\nimport { resolveVariant } from './resolve-dynamic-variants.mjs';\nimport { transformProps } from '../html/utils/transform.mjs';\nimport { isWillChangeMotionValue } from '../../value/use-will-change/is.mjs';\nimport { optimizedAppearDataAttribute } from '../../animation/optimized-appear/data-id.mjs';\nimport { createMotionValueAnimation } from '../../animation/index.mjs';\nimport { sync } from '../../frameloop/index.mjs';\n\nfunction animateVisualElement(visualElement, definition) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  visualElement.notify(\"AnimationStart\", definition);\n  let animation;\n\n  if (Array.isArray(definition)) {\n    const animations = definition.map(variant => animateVariant(visualElement, variant, options));\n    animation = Promise.all(animations);\n  } else if (typeof definition === \"string\") {\n    animation = animateVariant(visualElement, definition, options);\n  } else {\n    const resolvedDefinition = typeof definition === \"function\" ? resolveVariant(visualElement, definition, options.custom) : definition;\n    animation = animateTarget(visualElement, resolvedDefinition, options);\n  }\n\n  return animation.then(() => visualElement.notify(\"AnimationComplete\", definition));\n}\n\nfunction animateVariant(visualElement, variant) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const resolved = resolveVariant(visualElement, variant, options.custom);\n  let {\n    transition = visualElement.getDefaultTransition() || {}\n  } = resolved || {};\n\n  if (options.transitionOverride) {\n    transition = options.transitionOverride;\n  }\n  /**\n   * If we have a variant, create a callback that runs it as an animation.\n   * Otherwise, we resolve a Promise immediately for a composable no-op.\n   */\n\n\n  const getAnimation = resolved ? () => animateTarget(visualElement, resolved, options) : () => Promise.resolve();\n  /**\n   * If we have children, create a callback that runs all their animations.\n   * Otherwise, we resolve a Promise immediately for a composable no-op.\n   */\n\n  const getChildAnimations = visualElement.variantChildren && visualElement.variantChildren.size ? function () {\n    let forwardDelay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    const {\n      delayChildren = 0,\n      staggerChildren,\n      staggerDirection\n    } = transition;\n    return animateChildren(visualElement, variant, delayChildren + forwardDelay, staggerChildren, staggerDirection, options);\n  } : () => Promise.resolve();\n  /**\n   * If the transition explicitly defines a \"when\" option, we need to resolve either\n   * this animation or all children animations before playing the other.\n   */\n\n  const {\n    when\n  } = transition;\n\n  if (when) {\n    const [first, last] = when === \"beforeChildren\" ? [getAnimation, getChildAnimations] : [getChildAnimations, getAnimation];\n    return first().then(last);\n  } else {\n    return Promise.all([getAnimation(), getChildAnimations(options.delay)]);\n  }\n}\n/**\n * @internal\n */\n\n\nfunction animateTarget(visualElement, definition) {\n  let {\n    delay = 0,\n    transitionOverride,\n    type\n  } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let {\n    transition = visualElement.getDefaultTransition(),\n    transitionEnd,\n    ...target\n  } = visualElement.makeTargetAnimatable(definition);\n  const willChange = visualElement.getValue(\"willChange\");\n  if (transitionOverride) transition = transitionOverride;\n  const animations = [];\n  const animationTypeState = type && visualElement.animationState && visualElement.animationState.getState()[type];\n\n  for (const key in target) {\n    const value = visualElement.getValue(key);\n    const valueTarget = target[key];\n\n    if (!value || valueTarget === undefined || animationTypeState && shouldBlockAnimation(animationTypeState, key)) {\n      continue;\n    }\n\n    const valueTransition = {\n      delay,\n      elapsed: 0,\n      ...transition\n    };\n    /**\n     * If this is the first time a value is being animated, check\n     * to see if we're handling off from an existing animation.\n     */\n\n    if (window.HandoffAppearAnimations && !value.hasAnimated) {\n      const appearId = visualElement.getProps()[optimizedAppearDataAttribute];\n\n      if (appearId) {\n        valueTransition.elapsed = window.HandoffAppearAnimations(appearId, key, value, sync);\n      }\n    }\n\n    let animation = value.start(createMotionValueAnimation(key, value, valueTarget, visualElement.shouldReduceMotion && transformProps.has(key) ? {\n      type: false\n    } : valueTransition));\n\n    if (isWillChangeMotionValue(willChange)) {\n      willChange.add(key);\n      animation = animation.then(() => willChange.remove(key));\n    }\n\n    animations.push(animation);\n  }\n\n  return Promise.all(animations).then(() => {\n    transitionEnd && setTarget(visualElement, transitionEnd);\n  });\n}\n\nfunction animateChildren(visualElement, variant) {\n  let delayChildren = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  let staggerChildren = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n  let staggerDirection = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n  let options = arguments.length > 5 ? arguments[5] : undefined;\n  const animations = [];\n  const maxStaggerDuration = (visualElement.variantChildren.size - 1) * staggerChildren;\n  const generateStaggerDuration = staggerDirection === 1 ? function () {\n    let i = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    return i * staggerChildren;\n  } : function () {\n    let i = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    return maxStaggerDuration - i * staggerChildren;\n  };\n  Array.from(visualElement.variantChildren).sort(sortByTreeOrder).forEach((child, i) => {\n    child.notify(\"AnimationStart\", variant);\n    animations.push(animateVariant(child, variant, { ...options,\n      delay: delayChildren + generateStaggerDuration(i)\n    }).then(() => child.notify(\"AnimationComplete\", variant)));\n  });\n  return Promise.all(animations);\n}\n\nfunction stopAnimation(visualElement) {\n  visualElement.values.forEach(value => value.stop());\n}\n\nfunction sortByTreeOrder(a, b) {\n  return a.sortNodePosition(b);\n}\n/**\n * Decide whether we should block this animation. Previously, we achieved this\n * just by checking whether the key was listed in protectedKeys, but this\n * posed problems if an animation was triggered by afterChildren and protectedKeys\n * had been set to true in the meantime.\n */\n\n\nfunction shouldBlockAnimation(_ref, key) {\n  let {\n    protectedKeys,\n    needsAnimating\n  } = _ref;\n  const shouldBlock = protectedKeys.hasOwnProperty(key) && needsAnimating[key] !== true;\n  needsAnimating[key] = false;\n  return shouldBlock;\n}\n\nexport { animateVisualElement, sortByTreeOrder, stopAnimation };","map":{"version":3,"sources":["/Users/gagan/Desktop/sanjeev/someapp/node_modules/framer-motion/dist/es/render/utils/animation.mjs"],"names":["setTarget","resolveVariant","transformProps","isWillChangeMotionValue","optimizedAppearDataAttribute","createMotionValueAnimation","sync","animateVisualElement","visualElement","definition","options","notify","animation","Array","isArray","animations","map","variant","animateVariant","Promise","all","resolvedDefinition","custom","animateTarget","then","resolved","transition","getDefaultTransition","transitionOverride","getAnimation","resolve","getChildAnimations","variantChildren","size","forwardDelay","delayChildren","staggerChildren","staggerDirection","animateChildren","when","first","last","delay","type","transitionEnd","target","makeTargetAnimatable","willChange","getValue","animationTypeState","animationState","getState","key","value","valueTarget","undefined","shouldBlockAnimation","valueTransition","elapsed","window","HandoffAppearAnimations","hasAnimated","appearId","getProps","start","shouldReduceMotion","has","add","remove","push","maxStaggerDuration","generateStaggerDuration","i","from","sort","sortByTreeOrder","forEach","child","stopAnimation","values","stop","a","b","sortNodePosition","protectedKeys","needsAnimating","shouldBlock","hasOwnProperty"],"mappings":"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","sourcesContent":["import { setTarget } from './setters.mjs';\nimport { resolveVariant } from './resolve-dynamic-variants.mjs';\nimport { transformProps } from '../html/utils/transform.mjs';\nimport { isWillChangeMotionValue } from '../../value/use-will-change/is.mjs';\nimport { optimizedAppearDataAttribute } from '../../animation/optimized-appear/data-id.mjs';\nimport { createMotionValueAnimation } from '../../animation/index.mjs';\nimport { sync } from '../../frameloop/index.mjs';\n\nfunction animateVisualElement(visualElement, definition, options = {}) {\n    visualElement.notify(\"AnimationStart\", definition);\n    let animation;\n    if (Array.isArray(definition)) {\n        const animations = definition.map((variant) => animateVariant(visualElement, variant, options));\n        animation = Promise.all(animations);\n    }\n    else if (typeof definition === \"string\") {\n        animation = animateVariant(visualElement, definition, options);\n    }\n    else {\n        const resolvedDefinition = typeof definition === \"function\"\n            ? resolveVariant(visualElement, definition, options.custom)\n            : definition;\n        animation = animateTarget(visualElement, resolvedDefinition, options);\n    }\n    return animation.then(() => visualElement.notify(\"AnimationComplete\", definition));\n}\nfunction animateVariant(visualElement, variant, options = {}) {\n    const resolved = resolveVariant(visualElement, variant, options.custom);\n    let { transition = visualElement.getDefaultTransition() || {} } = resolved || {};\n    if (options.transitionOverride) {\n        transition = options.transitionOverride;\n    }\n    /**\n     * If we have a variant, create a callback that runs it as an animation.\n     * Otherwise, we resolve a Promise immediately for a composable no-op.\n     */\n    const getAnimation = resolved\n        ? () => animateTarget(visualElement, resolved, options)\n        : () => Promise.resolve();\n    /**\n     * If we have children, create a callback that runs all their animations.\n     * Otherwise, we resolve a Promise immediately for a composable no-op.\n     */\n    const getChildAnimations = visualElement.variantChildren && visualElement.variantChildren.size\n        ? (forwardDelay = 0) => {\n            const { delayChildren = 0, staggerChildren, staggerDirection, } = transition;\n            return animateChildren(visualElement, variant, delayChildren + forwardDelay, staggerChildren, staggerDirection, options);\n        }\n        : () => Promise.resolve();\n    /**\n     * If the transition explicitly defines a \"when\" option, we need to resolve either\n     * this animation or all children animations before playing the other.\n     */\n    const { when } = transition;\n    if (when) {\n        const [first, last] = when === \"beforeChildren\"\n            ? [getAnimation, getChildAnimations]\n            : [getChildAnimations, getAnimation];\n        return first().then(last);\n    }\n    else {\n        return Promise.all([getAnimation(), getChildAnimations(options.delay)]);\n    }\n}\n/**\n * @internal\n */\nfunction animateTarget(visualElement, definition, { delay = 0, transitionOverride, type } = {}) {\n    let { transition = visualElement.getDefaultTransition(), transitionEnd, ...target } = visualElement.makeTargetAnimatable(definition);\n    const willChange = visualElement.getValue(\"willChange\");\n    if (transitionOverride)\n        transition = transitionOverride;\n    const animations = [];\n    const animationTypeState = type &&\n        visualElement.animationState &&\n        visualElement.animationState.getState()[type];\n    for (const key in target) {\n        const value = visualElement.getValue(key);\n        const valueTarget = target[key];\n        if (!value ||\n            valueTarget === undefined ||\n            (animationTypeState &&\n                shouldBlockAnimation(animationTypeState, key))) {\n            continue;\n        }\n        const valueTransition = { delay, elapsed: 0, ...transition };\n        /**\n         * If this is the first time a value is being animated, check\n         * to see if we're handling off from an existing animation.\n         */\n        if (window.HandoffAppearAnimations && !value.hasAnimated) {\n            const appearId = visualElement.getProps()[optimizedAppearDataAttribute];\n            if (appearId) {\n                valueTransition.elapsed = window.HandoffAppearAnimations(appearId, key, value, sync);\n            }\n        }\n        let animation = value.start(createMotionValueAnimation(key, value, valueTarget, visualElement.shouldReduceMotion && transformProps.has(key)\n            ? { type: false }\n            : valueTransition));\n        if (isWillChangeMotionValue(willChange)) {\n            willChange.add(key);\n            animation = animation.then(() => willChange.remove(key));\n        }\n        animations.push(animation);\n    }\n    return Promise.all(animations).then(() => {\n        transitionEnd && setTarget(visualElement, transitionEnd);\n    });\n}\nfunction animateChildren(visualElement, variant, delayChildren = 0, staggerChildren = 0, staggerDirection = 1, options) {\n    const animations = [];\n    const maxStaggerDuration = (visualElement.variantChildren.size - 1) * staggerChildren;\n    const generateStaggerDuration = staggerDirection === 1\n        ? (i = 0) => i * staggerChildren\n        : (i = 0) => maxStaggerDuration - i * staggerChildren;\n    Array.from(visualElement.variantChildren)\n        .sort(sortByTreeOrder)\n        .forEach((child, i) => {\n        child.notify(\"AnimationStart\", variant);\n        animations.push(animateVariant(child, variant, {\n            ...options,\n            delay: delayChildren + generateStaggerDuration(i),\n        }).then(() => child.notify(\"AnimationComplete\", variant)));\n    });\n    return Promise.all(animations);\n}\nfunction stopAnimation(visualElement) {\n    visualElement.values.forEach((value) => value.stop());\n}\nfunction sortByTreeOrder(a, b) {\n    return a.sortNodePosition(b);\n}\n/**\n * Decide whether we should block this animation. Previously, we achieved this\n * just by checking whether the key was listed in protectedKeys, but this\n * posed problems if an animation was triggered by afterChildren and protectedKeys\n * had been set to true in the meantime.\n */\nfunction shouldBlockAnimation({ protectedKeys, needsAnimating }, key) {\n    const shouldBlock = protectedKeys.hasOwnProperty(key) && needsAnimating[key] !== true;\n    needsAnimating[key] = false;\n    return shouldBlock;\n}\n\nexport { animateVisualElement, sortByTreeOrder, stopAnimation };\n"]},"metadata":{},"sourceType":"module"}