{"ast":null,"code":"import { easeInOut } from '../../easing/ease.mjs';\nimport { interpolate } from '../../utils/interpolate.mjs';\nimport { defaultOffset } from '../../utils/offsets/default.mjs';\nimport { convertOffsetToTimes } from '../../utils/offsets/time.mjs';\nimport { isEasingArray, easingDefinitionToFunction } from '../utils/easing.mjs';\n\nfunction defaultEasing(values, easing) {\n  return values.map(() => easing || easeInOut).splice(0, values.length - 1);\n}\n\nfunction keyframes(_ref) {\n  let {\n    keyframes: keyframeValues,\n    ease = easeInOut,\n    times,\n    duration = 300\n  } = _ref;\n  keyframeValues = [...keyframeValues];\n  /**\n   * Easing functions can be externally defined as strings. Here we convert them\n   * into actual functions.\n   */\n\n  const easingFunctions = isEasingArray(ease) ? ease.map(easingDefinitionToFunction) : easingDefinitionToFunction(ease);\n  /**\n   * This is the Iterator-spec return value. We ensure it's mutable rather than using a generator\n   * to reduce GC during animation.\n   */\n\n  const state = {\n    done: false,\n    value: keyframeValues[0]\n  };\n  /**\n   * Create a times array based on the provided 0-1 offsets\n   */\n\n  const absoluteTimes = convertOffsetToTimes( // Only use the provided offsets if they're the correct length\n  // TODO Maybe we should warn here if there's a length mismatch\n  times && times.length === keyframeValues.length ? times : defaultOffset(keyframeValues), duration);\n\n  function createInterpolator() {\n    return interpolate(absoluteTimes, keyframeValues, {\n      ease: Array.isArray(easingFunctions) ? easingFunctions : defaultEasing(keyframeValues, easingFunctions)\n    });\n  }\n\n  let interpolator = createInterpolator();\n  return {\n    next: t => {\n      state.value = interpolator(t);\n      state.done = t >= duration;\n      return state;\n    },\n    flipTarget: () => {\n      keyframeValues.reverse();\n      interpolator = createInterpolator();\n    }\n  };\n}\n\nexport { defaultEasing, keyframes };","map":{"version":3,"sources":["/Users/gagan/Desktop/sanjeev/someapp/node_modules/framer-motion/dist/es/animation/legacy-popmotion/keyframes.mjs"],"names":["easeInOut","interpolate","defaultOffset","convertOffsetToTimes","isEasingArray","easingDefinitionToFunction","defaultEasing","values","easing","map","splice","length","keyframes","keyframeValues","ease","times","duration","easingFunctions","state","done","value","absoluteTimes","createInterpolator","Array","isArray","interpolator","next","t","flipTarget","reverse"],"mappings":"AAAA,SAASA,SAAT,QAA0B,uBAA1B;AACA,SAASC,WAAT,QAA4B,6BAA5B;AACA,SAASC,aAAT,QAA8B,iCAA9B;AACA,SAASC,oBAAT,QAAqC,8BAArC;AACA,SAASC,aAAT,EAAwBC,0BAAxB,QAA0D,qBAA1D;;AAEA,SAASC,aAAT,CAAuBC,MAAvB,EAA+BC,MAA/B,EAAuC;AACnC,SAAOD,MAAM,CAACE,GAAP,CAAW,MAAMD,MAAM,IAAIR,SAA3B,EAAsCU,MAAtC,CAA6C,CAA7C,EAAgDH,MAAM,CAACI,MAAP,GAAgB,CAAhE,CAAP;AACH;;AACD,SAASC,SAAT,OAA4F;AAAA,MAAzE;AAAEA,IAAAA,SAAS,EAAEC,cAAb;AAA6BC,IAAAA,IAAI,GAAGd,SAApC;AAA+Ce,IAAAA,KAA/C;AAAsDC,IAAAA,QAAQ,GAAG;AAAjE,GAAyE;AACxFH,EAAAA,cAAc,GAAG,CAAC,GAAGA,cAAJ,CAAjB;AACA;AACJ;AACA;AACA;;AACI,QAAMI,eAAe,GAAGb,aAAa,CAACU,IAAD,CAAb,GAClBA,IAAI,CAACL,GAAL,CAASJ,0BAAT,CADkB,GAElBA,0BAA0B,CAACS,IAAD,CAFhC;AAGA;AACJ;AACA;AACA;;AACI,QAAMI,KAAK,GAAG;AACVC,IAAAA,IAAI,EAAE,KADI;AAEVC,IAAAA,KAAK,EAAEP,cAAc,CAAC,CAAD;AAFX,GAAd;AAIA;AACJ;AACA;;AACI,QAAMQ,aAAa,GAAGlB,oBAAoB,EAC1C;AACA;AACAY,EAAAA,KAAK,IAAIA,KAAK,CAACJ,MAAN,KAAiBE,cAAc,CAACF,MAAzC,GACMI,KADN,GAEMb,aAAa,CAACW,cAAD,CALuB,EAKLG,QALK,CAA1C;;AAMA,WAASM,kBAAT,GAA8B;AAC1B,WAAOrB,WAAW,CAACoB,aAAD,EAAgBR,cAAhB,EAAgC;AAC9CC,MAAAA,IAAI,EAAES,KAAK,CAACC,OAAN,CAAcP,eAAd,IACAA,eADA,GAEAX,aAAa,CAACO,cAAD,EAAiBI,eAAjB;AAH2B,KAAhC,CAAlB;AAKH;;AACD,MAAIQ,YAAY,GAAGH,kBAAkB,EAArC;AACA,SAAO;AACHI,IAAAA,IAAI,EAAGC,CAAD,IAAO;AACTT,MAAAA,KAAK,CAACE,KAAN,GAAcK,YAAY,CAACE,CAAD,CAA1B;AACAT,MAAAA,KAAK,CAACC,IAAN,GAAaQ,CAAC,IAAIX,QAAlB;AACA,aAAOE,KAAP;AACH,KALE;AAMHU,IAAAA,UAAU,EAAE,MAAM;AACdf,MAAAA,cAAc,CAACgB,OAAf;AACAJ,MAAAA,YAAY,GAAGH,kBAAkB,EAAjC;AACH;AATE,GAAP;AAWH;;AAED,SAAShB,aAAT,EAAwBM,SAAxB","sourcesContent":["import { easeInOut } from '../../easing/ease.mjs';\nimport { interpolate } from '../../utils/interpolate.mjs';\nimport { defaultOffset } from '../../utils/offsets/default.mjs';\nimport { convertOffsetToTimes } from '../../utils/offsets/time.mjs';\nimport { isEasingArray, easingDefinitionToFunction } from '../utils/easing.mjs';\n\nfunction defaultEasing(values, easing) {\n    return values.map(() => easing || easeInOut).splice(0, values.length - 1);\n}\nfunction keyframes({ keyframes: keyframeValues, ease = easeInOut, times, duration = 300, }) {\n    keyframeValues = [...keyframeValues];\n    /**\n     * Easing functions can be externally defined as strings. Here we convert them\n     * into actual functions.\n     */\n    const easingFunctions = isEasingArray(ease)\n        ? ease.map(easingDefinitionToFunction)\n        : easingDefinitionToFunction(ease);\n    /**\n     * This is the Iterator-spec return value. We ensure it's mutable rather than using a generator\n     * to reduce GC during animation.\n     */\n    const state = {\n        done: false,\n        value: keyframeValues[0],\n    };\n    /**\n     * Create a times array based on the provided 0-1 offsets\n     */\n    const absoluteTimes = convertOffsetToTimes(\n    // Only use the provided offsets if they're the correct length\n    // TODO Maybe we should warn here if there's a length mismatch\n    times && times.length === keyframeValues.length\n        ? times\n        : defaultOffset(keyframeValues), duration);\n    function createInterpolator() {\n        return interpolate(absoluteTimes, keyframeValues, {\n            ease: Array.isArray(easingFunctions)\n                ? easingFunctions\n                : defaultEasing(keyframeValues, easingFunctions),\n        });\n    }\n    let interpolator = createInterpolator();\n    return {\n        next: (t) => {\n            state.value = interpolator(t);\n            state.done = t >= duration;\n            return state;\n        },\n        flipTarget: () => {\n            keyframeValues.reverse();\n            interpolator = createInterpolator();\n        },\n    };\n}\n\nexport { defaultEasing, keyframes };\n"]},"metadata":{},"sourceType":"module"}