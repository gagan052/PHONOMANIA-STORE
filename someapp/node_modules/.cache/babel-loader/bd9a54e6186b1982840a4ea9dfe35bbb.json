{"ast":null,"code":"import { createRenderStep } from './render-step.mjs';\nconst stepsOrder = [\"prepare\", \"read\", \"update\", \"preRender\", \"render\", \"postRender\"];\nconst maxElapsed = 40;\n\nfunction createRenderBatcher(scheduleNextBatch, allowKeepAlive) {\n  let runNextFrame = false;\n  let useDefaultElapsed = true;\n  const state = {\n    delta: 0,\n    timestamp: 0,\n    isProcessing: false\n  };\n  const steps = stepsOrder.reduce((acc, key) => {\n    acc[key] = createRenderStep(() => runNextFrame = true);\n    return acc;\n  }, {});\n\n  const processStep = stepId => steps[stepId].process(state);\n\n  const processBatch = () => {\n    const timestamp = performance.now();\n    runNextFrame = false;\n    state.delta = useDefaultElapsed ? 1000 / 60 : Math.max(Math.min(timestamp - state.timestamp, maxElapsed), 1);\n    state.timestamp = timestamp;\n    state.isProcessing = true;\n    stepsOrder.forEach(processStep);\n    state.isProcessing = false;\n\n    if (runNextFrame && allowKeepAlive) {\n      useDefaultElapsed = false;\n      scheduleNextBatch(processBatch);\n    }\n  };\n\n  const wake = () => {\n    runNextFrame = true;\n    useDefaultElapsed = true;\n\n    if (!state.isProcessing) {\n      scheduleNextBatch(processBatch);\n    }\n  };\n\n  const schedule = stepsOrder.reduce((acc, key) => {\n    const step = steps[key];\n\n    acc[key] = function (process) {\n      let keepAlive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      let immediate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      if (!runNextFrame) wake();\n      return step.schedule(process, keepAlive, immediate);\n    };\n\n    return acc;\n  }, {});\n\n  const cancel = process => stepsOrder.forEach(key => steps[key].cancel(process));\n\n  return {\n    schedule,\n    cancel,\n    state,\n    steps\n  };\n}\n\nexport { createRenderBatcher, stepsOrder };","map":{"version":3,"sources":["/Users/gagan/Desktop/sanjeev/someapp/node_modules/framer-motion/dist/es/frameloop/batcher.mjs"],"names":["createRenderStep","stepsOrder","maxElapsed","createRenderBatcher","scheduleNextBatch","allowKeepAlive","runNextFrame","useDefaultElapsed","state","delta","timestamp","isProcessing","steps","reduce","acc","key","processStep","stepId","process","processBatch","performance","now","Math","max","min","forEach","wake","schedule","step","keepAlive","immediate","cancel"],"mappings":"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","sourcesContent":["import { createRenderStep } from './render-step.mjs';\n\nconst stepsOrder = [\n    \"prepare\",\n    \"read\",\n    \"update\",\n    \"preRender\",\n    \"render\",\n    \"postRender\",\n];\nconst maxElapsed = 40;\nfunction createRenderBatcher(scheduleNextBatch, allowKeepAlive) {\n    let runNextFrame = false;\n    let useDefaultElapsed = true;\n    const state = {\n        delta: 0,\n        timestamp: 0,\n        isProcessing: false,\n    };\n    const steps = stepsOrder.reduce((acc, key) => {\n        acc[key] = createRenderStep(() => (runNextFrame = true));\n        return acc;\n    }, {});\n    const processStep = (stepId) => steps[stepId].process(state);\n    const processBatch = () => {\n        const timestamp = performance.now();\n        runNextFrame = false;\n        state.delta = useDefaultElapsed\n            ? 1000 / 60\n            : Math.max(Math.min(timestamp - state.timestamp, maxElapsed), 1);\n        state.timestamp = timestamp;\n        state.isProcessing = true;\n        stepsOrder.forEach(processStep);\n        state.isProcessing = false;\n        if (runNextFrame && allowKeepAlive) {\n            useDefaultElapsed = false;\n            scheduleNextBatch(processBatch);\n        }\n    };\n    const wake = () => {\n        runNextFrame = true;\n        useDefaultElapsed = true;\n        if (!state.isProcessing) {\n            scheduleNextBatch(processBatch);\n        }\n    };\n    const schedule = stepsOrder.reduce((acc, key) => {\n        const step = steps[key];\n        acc[key] = (process, keepAlive = false, immediate = false) => {\n            if (!runNextFrame)\n                wake();\n            return step.schedule(process, keepAlive, immediate);\n        };\n        return acc;\n    }, {});\n    const cancel = (process) => stepsOrder.forEach((key) => steps[key].cancel(process));\n    return { schedule, cancel, state, steps };\n}\n\nexport { createRenderBatcher, stepsOrder };\n"]},"metadata":{},"sourceType":"module"}