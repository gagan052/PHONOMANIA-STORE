{"ast":null,"code":"import { MotionGlobalConfig } from 'motion-utils';\nimport { stepsOrder } from './order.mjs';\nimport { createRenderStep } from './render-step.mjs';\nconst maxElapsed = 40;\n\nfunction createRenderBatcher(scheduleNextBatch, allowKeepAlive) {\n  let runNextFrame = false;\n  let useDefaultElapsed = true;\n  const state = {\n    delta: 0.0,\n    timestamp: 0.0,\n    isProcessing: false\n  };\n\n  const flagRunNextFrame = () => runNextFrame = true;\n\n  const steps = stepsOrder.reduce((acc, key) => {\n    acc[key] = createRenderStep(flagRunNextFrame, allowKeepAlive ? key : undefined);\n    return acc;\n  }, {});\n  const {\n    read,\n    resolveKeyframes,\n    update,\n    preRender,\n    render,\n    postRender\n  } = steps;\n\n  const processBatch = () => {\n    const timestamp = MotionGlobalConfig.useManualTiming ? state.timestamp : performance.now();\n    runNextFrame = false;\n\n    if (!MotionGlobalConfig.useManualTiming) {\n      state.delta = useDefaultElapsed ? 1000 / 60 : Math.max(Math.min(timestamp - state.timestamp, maxElapsed), 1);\n    }\n\n    state.timestamp = timestamp;\n    state.isProcessing = true; // Unrolled render loop for better per-frame performance\n\n    read.process(state);\n    resolveKeyframes.process(state);\n    update.process(state);\n    preRender.process(state);\n    render.process(state);\n    postRender.process(state);\n    state.isProcessing = false;\n\n    if (runNextFrame && allowKeepAlive) {\n      useDefaultElapsed = false;\n      scheduleNextBatch(processBatch);\n    }\n  };\n\n  const wake = () => {\n    runNextFrame = true;\n    useDefaultElapsed = true;\n\n    if (!state.isProcessing) {\n      scheduleNextBatch(processBatch);\n    }\n  };\n\n  const schedule = stepsOrder.reduce((acc, key) => {\n    const step = steps[key];\n\n    acc[key] = function (process) {\n      let keepAlive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      let immediate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      if (!runNextFrame) wake();\n      return step.schedule(process, keepAlive, immediate);\n    };\n\n    return acc;\n  }, {});\n\n  const cancel = process => {\n    for (let i = 0; i < stepsOrder.length; i++) {\n      steps[stepsOrder[i]].cancel(process);\n    }\n  };\n\n  return {\n    schedule,\n    cancel,\n    state,\n    steps\n  };\n}\n\nexport { createRenderBatcher };","map":{"version":3,"sources":["/Users/gagan/Desktop/sanjeev/someapp/node_modules/motion-dom/dist/es/frameloop/batcher.mjs"],"names":["MotionGlobalConfig","stepsOrder","createRenderStep","maxElapsed","createRenderBatcher","scheduleNextBatch","allowKeepAlive","runNextFrame","useDefaultElapsed","state","delta","timestamp","isProcessing","flagRunNextFrame","steps","reduce","acc","key","undefined","read","resolveKeyframes","update","preRender","render","postRender","processBatch","useManualTiming","performance","now","Math","max","min","process","wake","schedule","step","keepAlive","immediate","cancel","i","length"],"mappings":"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","sourcesContent":["import { MotionGlobalConfig } from 'motion-utils';\nimport { stepsOrder } from './order.mjs';\nimport { createRenderStep } from './render-step.mjs';\n\nconst maxElapsed = 40;\nfunction createRenderBatcher(scheduleNextBatch, allowKeepAlive) {\n    let runNextFrame = false;\n    let useDefaultElapsed = true;\n    const state = {\n        delta: 0.0,\n        timestamp: 0.0,\n        isProcessing: false,\n    };\n    const flagRunNextFrame = () => (runNextFrame = true);\n    const steps = stepsOrder.reduce((acc, key) => {\n        acc[key] = createRenderStep(flagRunNextFrame, allowKeepAlive ? key : undefined);\n        return acc;\n    }, {});\n    const { read, resolveKeyframes, update, preRender, render, postRender } = steps;\n    const processBatch = () => {\n        const timestamp = MotionGlobalConfig.useManualTiming\n            ? state.timestamp\n            : performance.now();\n        runNextFrame = false;\n        if (!MotionGlobalConfig.useManualTiming) {\n            state.delta = useDefaultElapsed\n                ? 1000 / 60\n                : Math.max(Math.min(timestamp - state.timestamp, maxElapsed), 1);\n        }\n        state.timestamp = timestamp;\n        state.isProcessing = true;\n        // Unrolled render loop for better per-frame performance\n        read.process(state);\n        resolveKeyframes.process(state);\n        update.process(state);\n        preRender.process(state);\n        render.process(state);\n        postRender.process(state);\n        state.isProcessing = false;\n        if (runNextFrame && allowKeepAlive) {\n            useDefaultElapsed = false;\n            scheduleNextBatch(processBatch);\n        }\n    };\n    const wake = () => {\n        runNextFrame = true;\n        useDefaultElapsed = true;\n        if (!state.isProcessing) {\n            scheduleNextBatch(processBatch);\n        }\n    };\n    const schedule = stepsOrder.reduce((acc, key) => {\n        const step = steps[key];\n        acc[key] = (process, keepAlive = false, immediate = false) => {\n            if (!runNextFrame)\n                wake();\n            return step.schedule(process, keepAlive, immediate);\n        };\n        return acc;\n    }, {});\n    const cancel = (process) => {\n        for (let i = 0; i < stepsOrder.length; i++) {\n            steps[stepsOrder[i]].cancel(process);\n        }\n    };\n    return { schedule, cancel, state, steps };\n}\n\nexport { createRenderBatcher };\n"]},"metadata":{},"sourceType":"module"}