{"ast":null,"code":"import { frame } from 'motion-dom';\nimport { noop } from 'motion-utils';\nimport { addPointerEvent } from '../../events/add-pointer-event.mjs';\nimport { Feature } from '../../motion/features/Feature.mjs';\nimport { getContextWindow } from '../../utils/get-context-window.mjs';\nimport { PanSession } from './PanSession.mjs';\n\nconst asyncHandler = handler => (event, info) => {\n  if (handler) {\n    frame.postRender(() => handler(event, info));\n  }\n};\n\nclass PanGesture extends Feature {\n  constructor() {\n    super(...arguments);\n    this.removePointerDownListener = noop;\n  }\n\n  onPointerDown(pointerDownEvent) {\n    this.session = new PanSession(pointerDownEvent, this.createPanHandlers(), {\n      transformPagePoint: this.node.getTransformPagePoint(),\n      contextWindow: getContextWindow(this.node)\n    });\n  }\n\n  createPanHandlers() {\n    const {\n      onPanSessionStart,\n      onPanStart,\n      onPan,\n      onPanEnd\n    } = this.node.getProps();\n    return {\n      onSessionStart: asyncHandler(onPanSessionStart),\n      onStart: asyncHandler(onPanStart),\n      onMove: onPan,\n      onEnd: (event, info) => {\n        delete this.session;\n\n        if (onPanEnd) {\n          frame.postRender(() => onPanEnd(event, info));\n        }\n      }\n    };\n  }\n\n  mount() {\n    this.removePointerDownListener = addPointerEvent(this.node.current, \"pointerdown\", event => this.onPointerDown(event));\n  }\n\n  update() {\n    this.session && this.session.updateHandlers(this.createPanHandlers());\n  }\n\n  unmount() {\n    this.removePointerDownListener();\n    this.session && this.session.end();\n  }\n\n}\n\nexport { PanGesture };","map":{"version":3,"sources":["/Users/gagan/Desktop/sanjeev/someapp/node_modules/framer-motion/dist/es/gestures/pan/index.mjs"],"names":["frame","noop","addPointerEvent","Feature","getContextWindow","PanSession","asyncHandler","handler","event","info","postRender","PanGesture","constructor","arguments","removePointerDownListener","onPointerDown","pointerDownEvent","session","createPanHandlers","transformPagePoint","node","getTransformPagePoint","contextWindow","onPanSessionStart","onPanStart","onPan","onPanEnd","getProps","onSessionStart","onStart","onMove","onEnd","mount","current","update","updateHandlers","unmount","end"],"mappings":"AAAA,SAASA,KAAT,QAAsB,YAAtB;AACA,SAASC,IAAT,QAAqB,cAArB;AACA,SAASC,eAAT,QAAgC,oCAAhC;AACA,SAASC,OAAT,QAAwB,mCAAxB;AACA,SAASC,gBAAT,QAAiC,oCAAjC;AACA,SAASC,UAAT,QAA2B,kBAA3B;;AAEA,MAAMC,YAAY,GAAIC,OAAD,IAAa,CAACC,KAAD,EAAQC,IAAR,KAAiB;AAC/C,MAAIF,OAAJ,EAAa;AACTP,IAAAA,KAAK,CAACU,UAAN,CAAiB,MAAMH,OAAO,CAACC,KAAD,EAAQC,IAAR,CAA9B;AACH;AACJ,CAJD;;AAKA,MAAME,UAAN,SAAyBR,OAAzB,CAAiC;AAC7BS,EAAAA,WAAW,GAAG;AACV,UAAM,GAAGC,SAAT;AACA,SAAKC,yBAAL,GAAiCb,IAAjC;AACH;;AACDc,EAAAA,aAAa,CAACC,gBAAD,EAAmB;AAC5B,SAAKC,OAAL,GAAe,IAAIZ,UAAJ,CAAeW,gBAAf,EAAiC,KAAKE,iBAAL,EAAjC,EAA2D;AACtEC,MAAAA,kBAAkB,EAAE,KAAKC,IAAL,CAAUC,qBAAV,EADkD;AAEtEC,MAAAA,aAAa,EAAElB,gBAAgB,CAAC,KAAKgB,IAAN;AAFuC,KAA3D,CAAf;AAIH;;AACDF,EAAAA,iBAAiB,GAAG;AAChB,UAAM;AAAEK,MAAAA,iBAAF;AAAqBC,MAAAA,UAArB;AAAiCC,MAAAA,KAAjC;AAAwCC,MAAAA;AAAxC,QAAqD,KAAKN,IAAL,CAAUO,QAAV,EAA3D;AACA,WAAO;AACHC,MAAAA,cAAc,EAAEtB,YAAY,CAACiB,iBAAD,CADzB;AAEHM,MAAAA,OAAO,EAAEvB,YAAY,CAACkB,UAAD,CAFlB;AAGHM,MAAAA,MAAM,EAAEL,KAHL;AAIHM,MAAAA,KAAK,EAAE,CAACvB,KAAD,EAAQC,IAAR,KAAiB;AACpB,eAAO,KAAKQ,OAAZ;;AACA,YAAIS,QAAJ,EAAc;AACV1B,UAAAA,KAAK,CAACU,UAAN,CAAiB,MAAMgB,QAAQ,CAAClB,KAAD,EAAQC,IAAR,CAA/B;AACH;AACJ;AATE,KAAP;AAWH;;AACDuB,EAAAA,KAAK,GAAG;AACJ,SAAKlB,yBAAL,GAAiCZ,eAAe,CAAC,KAAKkB,IAAL,CAAUa,OAAX,EAAoB,aAApB,EAAoCzB,KAAD,IAAW,KAAKO,aAAL,CAAmBP,KAAnB,CAA9C,CAAhD;AACH;;AACD0B,EAAAA,MAAM,GAAG;AACL,SAAKjB,OAAL,IAAgB,KAAKA,OAAL,CAAakB,cAAb,CAA4B,KAAKjB,iBAAL,EAA5B,CAAhB;AACH;;AACDkB,EAAAA,OAAO,GAAG;AACN,SAAKtB,yBAAL;AACA,SAAKG,OAAL,IAAgB,KAAKA,OAAL,CAAaoB,GAAb,EAAhB;AACH;;AAlC4B;;AAqCjC,SAAS1B,UAAT","sourcesContent":["import { frame } from 'motion-dom';\nimport { noop } from 'motion-utils';\nimport { addPointerEvent } from '../../events/add-pointer-event.mjs';\nimport { Feature } from '../../motion/features/Feature.mjs';\nimport { getContextWindow } from '../../utils/get-context-window.mjs';\nimport { PanSession } from './PanSession.mjs';\n\nconst asyncHandler = (handler) => (event, info) => {\n    if (handler) {\n        frame.postRender(() => handler(event, info));\n    }\n};\nclass PanGesture extends Feature {\n    constructor() {\n        super(...arguments);\n        this.removePointerDownListener = noop;\n    }\n    onPointerDown(pointerDownEvent) {\n        this.session = new PanSession(pointerDownEvent, this.createPanHandlers(), {\n            transformPagePoint: this.node.getTransformPagePoint(),\n            contextWindow: getContextWindow(this.node),\n        });\n    }\n    createPanHandlers() {\n        const { onPanSessionStart, onPanStart, onPan, onPanEnd } = this.node.getProps();\n        return {\n            onSessionStart: asyncHandler(onPanSessionStart),\n            onStart: asyncHandler(onPanStart),\n            onMove: onPan,\n            onEnd: (event, info) => {\n                delete this.session;\n                if (onPanEnd) {\n                    frame.postRender(() => onPanEnd(event, info));\n                }\n            },\n        };\n    }\n    mount() {\n        this.removePointerDownListener = addPointerEvent(this.node.current, \"pointerdown\", (event) => this.onPointerDown(event));\n    }\n    update() {\n        this.session && this.session.updateHandlers(this.createPanHandlers());\n    }\n    unmount() {\n        this.removePointerDownListener();\n        this.session && this.session.end();\n    }\n}\n\nexport { PanGesture };\n"]},"metadata":{},"sourceType":"module"}