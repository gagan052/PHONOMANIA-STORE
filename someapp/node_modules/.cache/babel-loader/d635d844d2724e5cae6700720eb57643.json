{"ast":null,"code":"import { Feature } from '../Feature.mjs';\nimport { observeIntersection } from './observers.mjs';\nconst thresholdNames = {\n  some: 0,\n  all: 1\n};\n\nclass InViewFeature extends Feature {\n  constructor() {\n    super(...arguments);\n    this.hasEnteredView = false;\n    this.isInView = false;\n  }\n  /**\n   * TODO: Remove this in 10.0\n   */\n\n\n  viewportFallback() {\n    /**\n     * Fire this in an rAF because, at this point, the animation state\n     * won't have flushed for the first time and there's certain logic in\n     * there that behaves differently on the initial animation.\n     */\n    requestAnimationFrame(() => {\n      this.hasEnteredView = true;\n      const {\n        onViewportEnter\n      } = this.node.getProps();\n      onViewportEnter && onViewportEnter(null);\n\n      if (this.node.animationState) {\n        this.node.animationState.setActive(\"whileInView\", true);\n      }\n    });\n  }\n\n  startObserver() {\n    this.unmount();\n    const {\n      viewport = {}\n    } = this.node.getProps();\n    const {\n      root,\n      margin: rootMargin,\n      amount = \"some\",\n      once,\n      fallback = true\n    } = viewport;\n\n    if (typeof IntersectionObserver === \"undefined\") {\n      if (fallback) this.viewportFallback();\n      return;\n    }\n\n    const options = {\n      root: root ? root.current : undefined,\n      rootMargin,\n      threshold: typeof amount === \"number\" ? amount : thresholdNames[amount]\n    };\n\n    const onIntersectionUpdate = entry => {\n      const {\n        isIntersecting\n      } = entry;\n      /**\n       * If there's been no change in the viewport state, early return.\n       */\n\n      if (this.isInView === isIntersecting) return;\n      this.isInView = isIntersecting;\n      /**\n       * Handle hasEnteredView. If this is only meant to run once, and\n       * element isn't visible, early return. Otherwise set hasEnteredView to true.\n       */\n\n      if (once && !isIntersecting && this.hasEnteredView) {\n        return;\n      } else if (isIntersecting) {\n        this.hasEnteredView = true;\n      }\n\n      if (this.node.animationState) {\n        this.node.animationState.setActive(\"whileInView\", isIntersecting);\n      }\n      /**\n       * Use the latest committed props rather than the ones in scope\n       * when this observer is created\n       */\n\n\n      const {\n        onViewportEnter,\n        onViewportLeave\n      } = this.node.getProps();\n      const callback = isIntersecting ? onViewportEnter : onViewportLeave;\n      callback && callback(entry);\n    };\n\n    return observeIntersection(this.node.current, options, onIntersectionUpdate);\n  }\n\n  mount() {\n    this.startObserver();\n  }\n\n  update() {\n    if (typeof IntersectionObserver === \"undefined\") return;\n    const {\n      props,\n      prevProps\n    } = this.node;\n    const hasOptionsChanged = [\"amount\", \"margin\", \"root\"].some(hasViewportOptionChanged(props, prevProps));\n\n    if (hasOptionsChanged) {\n      this.startObserver();\n    }\n  }\n\n  unmount() {}\n\n}\n\nfunction hasViewportOptionChanged(_ref) {\n  let {\n    viewport = {}\n  } = _ref;\n  let {\n    viewport: prevViewport = {}\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return name => viewport[name] !== prevViewport[name];\n}\n\nexport { InViewFeature };","map":{"version":3,"sources":["/Users/gagan/Desktop/sanjeev/someapp/node_modules/framer-motion/dist/es/motion/features/viewport/index.mjs"],"names":["Feature","observeIntersection","thresholdNames","some","all","InViewFeature","constructor","arguments","hasEnteredView","isInView","viewportFallback","requestAnimationFrame","onViewportEnter","node","getProps","animationState","setActive","startObserver","unmount","viewport","root","margin","rootMargin","amount","once","fallback","IntersectionObserver","options","current","undefined","threshold","onIntersectionUpdate","entry","isIntersecting","onViewportLeave","callback","mount","update","props","prevProps","hasOptionsChanged","hasViewportOptionChanged","prevViewport","name"],"mappings":"AAAA,SAASA,OAAT,QAAwB,gBAAxB;AACA,SAASC,mBAAT,QAAoC,iBAApC;AAEA,MAAMC,cAAc,GAAG;AACnBC,EAAAA,IAAI,EAAE,CADa;AAEnBC,EAAAA,GAAG,EAAE;AAFc,CAAvB;;AAIA,MAAMC,aAAN,SAA4BL,OAA5B,CAAoC;AAChCM,EAAAA,WAAW,GAAG;AACV,UAAM,GAAGC,SAAT;AACA,SAAKC,cAAL,GAAsB,KAAtB;AACA,SAAKC,QAAL,GAAgB,KAAhB;AACH;AACD;AACJ;AACA;;;AACIC,EAAAA,gBAAgB,GAAG;AACf;AACR;AACA;AACA;AACA;AACQC,IAAAA,qBAAqB,CAAC,MAAM;AACxB,WAAKH,cAAL,GAAsB,IAAtB;AACA,YAAM;AAAEI,QAAAA;AAAF,UAAsB,KAAKC,IAAL,CAAUC,QAAV,EAA5B;AACAF,MAAAA,eAAe,IAAIA,eAAe,CAAC,IAAD,CAAlC;;AACA,UAAI,KAAKC,IAAL,CAAUE,cAAd,EAA8B;AAC1B,aAAKF,IAAL,CAAUE,cAAV,CAAyBC,SAAzB,CAAmC,aAAnC,EAAkD,IAAlD;AACH;AACJ,KAPoB,CAArB;AAQH;;AACDC,EAAAA,aAAa,GAAG;AACZ,SAAKC,OAAL;AACA,UAAM;AAAEC,MAAAA,QAAQ,GAAG;AAAb,QAAoB,KAAKN,IAAL,CAAUC,QAAV,EAA1B;AACA,UAAM;AAAEM,MAAAA,IAAF;AAAQC,MAAAA,MAAM,EAAEC,UAAhB;AAA4BC,MAAAA,MAAM,GAAG,MAArC;AAA6CC,MAAAA,IAA7C;AAAmDC,MAAAA,QAAQ,GAAG;AAA9D,QAAwEN,QAA9E;;AACA,QAAI,OAAOO,oBAAP,KAAgC,WAApC,EAAiD;AAC7C,UAAID,QAAJ,EACI,KAAKf,gBAAL;AACJ;AACH;;AACD,UAAMiB,OAAO,GAAG;AACZP,MAAAA,IAAI,EAAEA,IAAI,GAAGA,IAAI,CAACQ,OAAR,GAAkBC,SADhB;AAEZP,MAAAA,UAFY;AAGZQ,MAAAA,SAAS,EAAE,OAAOP,MAAP,KAAkB,QAAlB,GAA6BA,MAA7B,GAAsCrB,cAAc,CAACqB,MAAD;AAHnD,KAAhB;;AAKA,UAAMQ,oBAAoB,GAAIC,KAAD,IAAW;AACpC,YAAM;AAAEC,QAAAA;AAAF,UAAqBD,KAA3B;AACA;AACZ;AACA;;AACY,UAAI,KAAKvB,QAAL,KAAkBwB,cAAtB,EACI;AACJ,WAAKxB,QAAL,GAAgBwB,cAAhB;AACA;AACZ;AACA;AACA;;AACY,UAAIT,IAAI,IAAI,CAACS,cAAT,IAA2B,KAAKzB,cAApC,EAAoD;AAChD;AACH,OAFD,MAGK,IAAIyB,cAAJ,EAAoB;AACrB,aAAKzB,cAAL,GAAsB,IAAtB;AACH;;AACD,UAAI,KAAKK,IAAL,CAAUE,cAAd,EAA8B;AAC1B,aAAKF,IAAL,CAAUE,cAAV,CAAyBC,SAAzB,CAAmC,aAAnC,EAAkDiB,cAAlD;AACH;AACD;AACZ;AACA;AACA;;;AACY,YAAM;AAAErB,QAAAA,eAAF;AAAmBsB,QAAAA;AAAnB,UAAuC,KAAKrB,IAAL,CAAUC,QAAV,EAA7C;AACA,YAAMqB,QAAQ,GAAGF,cAAc,GAAGrB,eAAH,GAAqBsB,eAApD;AACAC,MAAAA,QAAQ,IAAIA,QAAQ,CAACH,KAAD,CAApB;AACH,KA5BD;;AA6BA,WAAO/B,mBAAmB,CAAC,KAAKY,IAAL,CAAUe,OAAX,EAAoBD,OAApB,EAA6BI,oBAA7B,CAA1B;AACH;;AACDK,EAAAA,KAAK,GAAG;AACJ,SAAKnB,aAAL;AACH;;AACDoB,EAAAA,MAAM,GAAG;AACL,QAAI,OAAOX,oBAAP,KAAgC,WAApC,EACI;AACJ,UAAM;AAAEY,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAuB,KAAK1B,IAAlC;AACA,UAAM2B,iBAAiB,GAAG,CAAC,QAAD,EAAW,QAAX,EAAqB,MAArB,EAA6BrC,IAA7B,CAAkCsC,wBAAwB,CAACH,KAAD,EAAQC,SAAR,CAA1D,CAA1B;;AACA,QAAIC,iBAAJ,EAAuB;AACnB,WAAKvB,aAAL;AACH;AACJ;;AACDC,EAAAA,OAAO,GAAG,CAAG;;AAjFmB;;AAmFpC,SAASuB,wBAAT,OAA2F;AAAA,MAAzD;AAAEtB,IAAAA,QAAQ,GAAG;AAAb,GAAyD;AAAA,MAAtC;AAAEA,IAAAA,QAAQ,EAAEuB,YAAY,GAAG;AAA3B,GAAsC,uEAAJ,EAAI;AACvF,SAAQC,IAAD,IAAUxB,QAAQ,CAACwB,IAAD,CAAR,KAAmBD,YAAY,CAACC,IAAD,CAAhD;AACH;;AAED,SAAStC,aAAT","sourcesContent":["import { Feature } from '../Feature.mjs';\nimport { observeIntersection } from './observers.mjs';\n\nconst thresholdNames = {\n    some: 0,\n    all: 1,\n};\nclass InViewFeature extends Feature {\n    constructor() {\n        super(...arguments);\n        this.hasEnteredView = false;\n        this.isInView = false;\n    }\n    /**\n     * TODO: Remove this in 10.0\n     */\n    viewportFallback() {\n        /**\n         * Fire this in an rAF because, at this point, the animation state\n         * won't have flushed for the first time and there's certain logic in\n         * there that behaves differently on the initial animation.\n         */\n        requestAnimationFrame(() => {\n            this.hasEnteredView = true;\n            const { onViewportEnter } = this.node.getProps();\n            onViewportEnter && onViewportEnter(null);\n            if (this.node.animationState) {\n                this.node.animationState.setActive(\"whileInView\", true);\n            }\n        });\n    }\n    startObserver() {\n        this.unmount();\n        const { viewport = {} } = this.node.getProps();\n        const { root, margin: rootMargin, amount = \"some\", once, fallback = true, } = viewport;\n        if (typeof IntersectionObserver === \"undefined\") {\n            if (fallback)\n                this.viewportFallback();\n            return;\n        }\n        const options = {\n            root: root ? root.current : undefined,\n            rootMargin,\n            threshold: typeof amount === \"number\" ? amount : thresholdNames[amount],\n        };\n        const onIntersectionUpdate = (entry) => {\n            const { isIntersecting } = entry;\n            /**\n             * If there's been no change in the viewport state, early return.\n             */\n            if (this.isInView === isIntersecting)\n                return;\n            this.isInView = isIntersecting;\n            /**\n             * Handle hasEnteredView. If this is only meant to run once, and\n             * element isn't visible, early return. Otherwise set hasEnteredView to true.\n             */\n            if (once && !isIntersecting && this.hasEnteredView) {\n                return;\n            }\n            else if (isIntersecting) {\n                this.hasEnteredView = true;\n            }\n            if (this.node.animationState) {\n                this.node.animationState.setActive(\"whileInView\", isIntersecting);\n            }\n            /**\n             * Use the latest committed props rather than the ones in scope\n             * when this observer is created\n             */\n            const { onViewportEnter, onViewportLeave } = this.node.getProps();\n            const callback = isIntersecting ? onViewportEnter : onViewportLeave;\n            callback && callback(entry);\n        };\n        return observeIntersection(this.node.current, options, onIntersectionUpdate);\n    }\n    mount() {\n        this.startObserver();\n    }\n    update() {\n        if (typeof IntersectionObserver === \"undefined\")\n            return;\n        const { props, prevProps } = this.node;\n        const hasOptionsChanged = [\"amount\", \"margin\", \"root\"].some(hasViewportOptionChanged(props, prevProps));\n        if (hasOptionsChanged) {\n            this.startObserver();\n        }\n    }\n    unmount() { }\n}\nfunction hasViewportOptionChanged({ viewport = {} }, { viewport: prevViewport = {} } = {}) {\n    return (name) => viewport[name] !== prevViewport[name];\n}\n\nexport { InViewFeature };\n"]},"metadata":{},"sourceType":"module"}