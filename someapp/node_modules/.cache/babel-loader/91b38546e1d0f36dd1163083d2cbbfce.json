{"ast":null,"code":"import { useContext, useRef, useInsertionEffect, useEffect } from 'react';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\nimport { MotionContext } from '../../context/MotionContext/index.mjs';\nimport { useIsomorphicLayoutEffect } from '../../utils/use-isomorphic-effect.mjs';\nimport { LazyContext } from '../../context/LazyContext.mjs';\nimport { MotionConfigContext } from '../../context/MotionConfigContext.mjs';\n\nfunction useVisualElement(Component, visualState, props, createVisualElement) {\n  const {\n    visualElement: parent\n  } = useContext(MotionContext);\n  const lazyContext = useContext(LazyContext);\n  const presenceContext = useContext(PresenceContext);\n  const reducedMotionConfig = useContext(MotionConfigContext).reducedMotion;\n  const visualElementRef = useRef();\n  /**\n   * If we haven't preloaded a renderer, check to see if we have one lazy-loaded\n   */\n\n  createVisualElement = createVisualElement || lazyContext.renderer;\n\n  if (!visualElementRef.current && createVisualElement) {\n    visualElementRef.current = createVisualElement(Component, {\n      visualState,\n      parent,\n      props,\n      presenceContext,\n      blockInitialAnimation: presenceContext ? presenceContext.initial === false : false,\n      reducedMotionConfig\n    });\n  }\n\n  const visualElement = visualElementRef.current;\n  useInsertionEffect(() => {\n    visualElement && visualElement.update(props, presenceContext);\n  });\n  /**\n   * Cache this value as we want to know whether HandoffAppearAnimations\n   * was present on initial render - it will be deleted after this.\n   */\n\n  const canHandoff = useRef(Boolean(window.HandoffAppearAnimations));\n  useIsomorphicLayoutEffect(() => {\n    if (!visualElement) return;\n    visualElement.render();\n    /**\n     * Ideally this function would always run in a useEffect.\n     *\n     * However, if we have optimised appear animations to handoff from,\n     * it needs to happen synchronously to ensure there's no flash of\n     * incorrect styles in the event of a hydration error.\n     *\n     * So if we detect a situtation where optimised appear animations\n     * are running, we use useLayoutEffect to trigger animations.\n     */\n\n    if (canHandoff.current && visualElement.animationState) {\n      visualElement.animationState.animateChanges();\n    }\n  });\n  useEffect(() => {\n    if (!visualElement) return;\n    visualElement.updateFeatures();\n\n    if (!canHandoff.current && visualElement.animationState) {\n      visualElement.animationState.animateChanges();\n    }\n    /**\n     * Once we've handed off animations we can delete HandoffAppearAnimations\n     * so components added after the initial render can animate changes\n     * in useEffect vs useLayoutEffect.\n     */\n\n\n    window.HandoffAppearAnimations = undefined;\n    canHandoff.current = false;\n  });\n  return visualElement;\n}\n\nexport { useVisualElement };","map":{"version":3,"sources":["/Users/gagan/Desktop/sanjeev/someapp/node_modules/framer-motion/dist/es/motion/utils/use-visual-element.mjs"],"names":["useContext","useRef","useInsertionEffect","useEffect","PresenceContext","MotionContext","useIsomorphicLayoutEffect","LazyContext","MotionConfigContext","useVisualElement","Component","visualState","props","createVisualElement","visualElement","parent","lazyContext","presenceContext","reducedMotionConfig","reducedMotion","visualElementRef","renderer","current","blockInitialAnimation","initial","update","canHandoff","Boolean","window","HandoffAppearAnimations","render","animationState","animateChanges","updateFeatures","undefined"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,MAArB,EAA6BC,kBAA7B,EAAiDC,SAAjD,QAAkE,OAAlE;AACA,SAASC,eAAT,QAAgC,mCAAhC;AACA,SAASC,aAAT,QAA8B,uCAA9B;AACA,SAASC,yBAAT,QAA0C,uCAA1C;AACA,SAASC,WAAT,QAA4B,+BAA5B;AACA,SAASC,mBAAT,QAAoC,uCAApC;;AAEA,SAASC,gBAAT,CAA0BC,SAA1B,EAAqCC,WAArC,EAAkDC,KAAlD,EAAyDC,mBAAzD,EAA8E;AAC1E,QAAM;AAAEC,IAAAA,aAAa,EAAEC;AAAjB,MAA4Bf,UAAU,CAACK,aAAD,CAA5C;AACA,QAAMW,WAAW,GAAGhB,UAAU,CAACO,WAAD,CAA9B;AACA,QAAMU,eAAe,GAAGjB,UAAU,CAACI,eAAD,CAAlC;AACA,QAAMc,mBAAmB,GAAGlB,UAAU,CAACQ,mBAAD,CAAV,CAAgCW,aAA5D;AACA,QAAMC,gBAAgB,GAAGnB,MAAM,EAA/B;AACA;AACJ;AACA;;AACIY,EAAAA,mBAAmB,GAAGA,mBAAmB,IAAIG,WAAW,CAACK,QAAzD;;AACA,MAAI,CAACD,gBAAgB,CAACE,OAAlB,IAA6BT,mBAAjC,EAAsD;AAClDO,IAAAA,gBAAgB,CAACE,OAAjB,GAA2BT,mBAAmB,CAACH,SAAD,EAAY;AACtDC,MAAAA,WADsD;AAEtDI,MAAAA,MAFsD;AAGtDH,MAAAA,KAHsD;AAItDK,MAAAA,eAJsD;AAKtDM,MAAAA,qBAAqB,EAAEN,eAAe,GAChCA,eAAe,CAACO,OAAhB,KAA4B,KADI,GAEhC,KAPgD;AAQtDN,MAAAA;AARsD,KAAZ,CAA9C;AAUH;;AACD,QAAMJ,aAAa,GAAGM,gBAAgB,CAACE,OAAvC;AACApB,EAAAA,kBAAkB,CAAC,MAAM;AACrBY,IAAAA,aAAa,IAAIA,aAAa,CAACW,MAAd,CAAqBb,KAArB,EAA4BK,eAA5B,CAAjB;AACH,GAFiB,CAAlB;AAGA;AACJ;AACA;AACA;;AACI,QAAMS,UAAU,GAAGzB,MAAM,CAAC0B,OAAO,CAACC,MAAM,CAACC,uBAAR,CAAR,CAAzB;AACAvB,EAAAA,yBAAyB,CAAC,MAAM;AAC5B,QAAI,CAACQ,aAAL,EACI;AACJA,IAAAA,aAAa,CAACgB,MAAd;AACA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACQ,QAAIJ,UAAU,CAACJ,OAAX,IAAsBR,aAAa,CAACiB,cAAxC,EAAwD;AACpDjB,MAAAA,aAAa,CAACiB,cAAd,CAA6BC,cAA7B;AACH;AACJ,GAjBwB,CAAzB;AAkBA7B,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAI,CAACW,aAAL,EACI;AACJA,IAAAA,aAAa,CAACmB,cAAd;;AACA,QAAI,CAACP,UAAU,CAACJ,OAAZ,IAAuBR,aAAa,CAACiB,cAAzC,EAAyD;AACrDjB,MAAAA,aAAa,CAACiB,cAAd,CAA6BC,cAA7B;AACH;AACD;AACR;AACA;AACA;AACA;;;AACQJ,IAAAA,MAAM,CAACC,uBAAP,GAAiCK,SAAjC;AACAR,IAAAA,UAAU,CAACJ,OAAX,GAAqB,KAArB;AACH,GAdQ,CAAT;AAeA,SAAOR,aAAP;AACH;;AAED,SAASL,gBAAT","sourcesContent":["import { useContext, useRef, useInsertionEffect, useEffect } from 'react';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\nimport { MotionContext } from '../../context/MotionContext/index.mjs';\nimport { useIsomorphicLayoutEffect } from '../../utils/use-isomorphic-effect.mjs';\nimport { LazyContext } from '../../context/LazyContext.mjs';\nimport { MotionConfigContext } from '../../context/MotionConfigContext.mjs';\n\nfunction useVisualElement(Component, visualState, props, createVisualElement) {\n    const { visualElement: parent } = useContext(MotionContext);\n    const lazyContext = useContext(LazyContext);\n    const presenceContext = useContext(PresenceContext);\n    const reducedMotionConfig = useContext(MotionConfigContext).reducedMotion;\n    const visualElementRef = useRef();\n    /**\n     * If we haven't preloaded a renderer, check to see if we have one lazy-loaded\n     */\n    createVisualElement = createVisualElement || lazyContext.renderer;\n    if (!visualElementRef.current && createVisualElement) {\n        visualElementRef.current = createVisualElement(Component, {\n            visualState,\n            parent,\n            props,\n            presenceContext,\n            blockInitialAnimation: presenceContext\n                ? presenceContext.initial === false\n                : false,\n            reducedMotionConfig,\n        });\n    }\n    const visualElement = visualElementRef.current;\n    useInsertionEffect(() => {\n        visualElement && visualElement.update(props, presenceContext);\n    });\n    /**\n     * Cache this value as we want to know whether HandoffAppearAnimations\n     * was present on initial render - it will be deleted after this.\n     */\n    const canHandoff = useRef(Boolean(window.HandoffAppearAnimations));\n    useIsomorphicLayoutEffect(() => {\n        if (!visualElement)\n            return;\n        visualElement.render();\n        /**\n         * Ideally this function would always run in a useEffect.\n         *\n         * However, if we have optimised appear animations to handoff from,\n         * it needs to happen synchronously to ensure there's no flash of\n         * incorrect styles in the event of a hydration error.\n         *\n         * So if we detect a situtation where optimised appear animations\n         * are running, we use useLayoutEffect to trigger animations.\n         */\n        if (canHandoff.current && visualElement.animationState) {\n            visualElement.animationState.animateChanges();\n        }\n    });\n    useEffect(() => {\n        if (!visualElement)\n            return;\n        visualElement.updateFeatures();\n        if (!canHandoff.current && visualElement.animationState) {\n            visualElement.animationState.animateChanges();\n        }\n        /**\n         * Once we've handed off animations we can delete HandoffAppearAnimations\n         * so components added after the initial render can animate changes\n         * in useEffect vs useLayoutEffect.\n         */\n        window.HandoffAppearAnimations = undefined;\n        canHandoff.current = false;\n    });\n    return visualElement;\n}\n\nexport { useVisualElement };\n"]},"metadata":{},"sourceType":"module"}