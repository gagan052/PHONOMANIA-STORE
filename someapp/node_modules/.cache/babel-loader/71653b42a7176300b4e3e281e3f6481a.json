{"ast":null,"code":"import { invariant } from 'hey-listen';\nimport { animateStyle } from './animate-style.es.js';\nimport { getOptions } from './utils/options.es.js';\nimport { resolveElements } from '../utils/resolve-elements.es.js';\nimport { withControls } from './utils/controls.es.js';\nimport { resolveOption } from '../utils/stagger.es.js';\n\nfunction createAnimate(AnimatePolyfill) {\n  return function animate(elements, keyframes) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    elements = resolveElements(elements);\n    const numElements = elements.length;\n    invariant(Boolean(numElements), \"No valid element provided.\");\n    invariant(Boolean(keyframes), \"No keyframes defined.\");\n    /**\n     * Create and start new animations\n     */\n\n    const animationFactories = [];\n\n    for (let i = 0; i < numElements; i++) {\n      const element = elements[i];\n\n      for (const key in keyframes) {\n        const valueOptions = getOptions(options, key);\n        valueOptions.delay = resolveOption(valueOptions.delay, i, numElements);\n        const animation = animateStyle(element, key, keyframes[key], valueOptions, AnimatePolyfill);\n        animationFactories.push(animation);\n      }\n    }\n\n    return withControls(animationFactories, options,\n    /**\n     * TODO:\n     * If easing is set to spring or glide, duration will be dynamically\n     * generated. Ideally we would dynamically generate this from\n     * animation.effect.getComputedTiming().duration but this isn't\n     * supported in iOS13 or our number polyfill. Perhaps it's possible\n     * to Proxy animations returned from animateStyle that has duration\n     * as a getter.\n     */\n    options.duration);\n  };\n}\n\nexport { createAnimate };","map":{"version":3,"sources":["/Users/gagan/Desktop/sanjeev/someapp/node_modules/@motionone/dom/dist/animate/create-animate.es.js"],"names":["invariant","animateStyle","getOptions","resolveElements","withControls","resolveOption","createAnimate","AnimatePolyfill","animate","elements","keyframes","options","numElements","length","Boolean","animationFactories","i","element","key","valueOptions","delay","animation","push","duration"],"mappings":"AAAA,SAASA,SAAT,QAA0B,YAA1B;AACA,SAASC,YAAT,QAA6B,uBAA7B;AACA,SAASC,UAAT,QAA2B,uBAA3B;AACA,SAASC,eAAT,QAAgC,iCAAhC;AACA,SAASC,YAAT,QAA6B,wBAA7B;AACA,SAASC,aAAT,QAA8B,wBAA9B;;AAEA,SAASC,aAAT,CAAuBC,eAAvB,EAAwC;AACpC,SAAO,SAASC,OAAT,CAAiBC,QAAjB,EAA2BC,SAA3B,EAAoD;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AACvDF,IAAAA,QAAQ,GAAGN,eAAe,CAACM,QAAD,CAA1B;AACA,UAAMG,WAAW,GAAGH,QAAQ,CAACI,MAA7B;AACAb,IAAAA,SAAS,CAACc,OAAO,CAACF,WAAD,CAAR,EAAuB,4BAAvB,CAAT;AACAZ,IAAAA,SAAS,CAACc,OAAO,CAACJ,SAAD,CAAR,EAAqB,uBAArB,CAAT;AACA;AACR;AACA;;AACQ,UAAMK,kBAAkB,GAAG,EAA3B;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,WAApB,EAAiCI,CAAC,EAAlC,EAAsC;AAClC,YAAMC,OAAO,GAAGR,QAAQ,CAACO,CAAD,CAAxB;;AACA,WAAK,MAAME,GAAX,IAAkBR,SAAlB,EAA6B;AACzB,cAAMS,YAAY,GAAGjB,UAAU,CAACS,OAAD,EAAUO,GAAV,CAA/B;AACAC,QAAAA,YAAY,CAACC,KAAb,GAAqBf,aAAa,CAACc,YAAY,CAACC,KAAd,EAAqBJ,CAArB,EAAwBJ,WAAxB,CAAlC;AACA,cAAMS,SAAS,GAAGpB,YAAY,CAACgB,OAAD,EAAUC,GAAV,EAAeR,SAAS,CAACQ,GAAD,CAAxB,EAA+BC,YAA/B,EAA6CZ,eAA7C,CAA9B;AACAQ,QAAAA,kBAAkB,CAACO,IAAnB,CAAwBD,SAAxB;AACH;AACJ;;AACD,WAAOjB,YAAY,CAACW,kBAAD,EAAqBJ,OAArB;AACnB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQA,IAAAA,OAAO,CAACY,QAVW,CAAnB;AAWH,GA7BD;AA8BH;;AAED,SAASjB,aAAT","sourcesContent":["import { invariant } from 'hey-listen';\nimport { animateStyle } from './animate-style.es.js';\nimport { getOptions } from './utils/options.es.js';\nimport { resolveElements } from '../utils/resolve-elements.es.js';\nimport { withControls } from './utils/controls.es.js';\nimport { resolveOption } from '../utils/stagger.es.js';\n\nfunction createAnimate(AnimatePolyfill) {\n    return function animate(elements, keyframes, options = {}) {\n        elements = resolveElements(elements);\n        const numElements = elements.length;\n        invariant(Boolean(numElements), \"No valid element provided.\");\n        invariant(Boolean(keyframes), \"No keyframes defined.\");\n        /**\n         * Create and start new animations\n         */\n        const animationFactories = [];\n        for (let i = 0; i < numElements; i++) {\n            const element = elements[i];\n            for (const key in keyframes) {\n                const valueOptions = getOptions(options, key);\n                valueOptions.delay = resolveOption(valueOptions.delay, i, numElements);\n                const animation = animateStyle(element, key, keyframes[key], valueOptions, AnimatePolyfill);\n                animationFactories.push(animation);\n            }\n        }\n        return withControls(animationFactories, options, \n        /**\n         * TODO:\n         * If easing is set to spring or glide, duration will be dynamically\n         * generated. Ideally we would dynamically generate this from\n         * animation.effect.getComputedTiming().duration but this isn't\n         * supported in iOS13 or our number polyfill. Perhaps it's possible\n         * to Proxy animations returned from animateStyle that has duration\n         * as a getter.\n         */\n        options.duration);\n    };\n}\n\nexport { createAnimate };\n"]},"metadata":{},"sourceType":"module"}