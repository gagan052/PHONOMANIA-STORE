{"ast":null,"code":"import { frame } from 'motion-dom';\nimport { createBox } from '../../projection/geometry/models.mjs';\nimport { DOMVisualElement } from '../dom/DOMVisualElement.mjs';\nimport { camelToDash } from '../dom/utils/camel-to-dash.mjs';\nimport { getDefaultValueType } from '../dom/value-types/defaults.mjs';\nimport { transformProps } from '../html/utils/keys-transform.mjs';\nimport { buildSVGAttrs } from './utils/build-attrs.mjs';\nimport { camelCaseAttributes } from './utils/camel-case-attrs.mjs';\nimport { isSVGTag } from './utils/is-svg-tag.mjs';\nimport { updateSVGDimensions } from './utils/measure.mjs';\nimport { renderSVG } from './utils/render.mjs';\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\n\nclass SVGVisualElement extends DOMVisualElement {\n  constructor() {\n    super(...arguments);\n    this.type = \"svg\";\n    this.isSVGTag = false;\n    this.measureInstanceViewportBox = createBox;\n\n    this.updateDimensions = () => {\n      if (this.current && !this.renderState.dimensions) {\n        updateSVGDimensions(this.current, this.renderState);\n      }\n    };\n  }\n\n  getBaseTargetFromProps(props, key) {\n    return props[key];\n  }\n\n  readValueFromInstance(instance, key) {\n    if (transformProps.has(key)) {\n      const defaultType = getDefaultValueType(key);\n      return defaultType ? defaultType.default || 0 : 0;\n    }\n\n    key = !camelCaseAttributes.has(key) ? camelToDash(key) : key;\n    return instance.getAttribute(key);\n  }\n\n  scrapeMotionValuesFromProps(props, prevProps, visualElement) {\n    return scrapeMotionValuesFromProps(props, prevProps, visualElement);\n  }\n\n  onBindTransform() {\n    if (this.current && !this.renderState.dimensions) {\n      frame.postRender(this.updateDimensions);\n    }\n  }\n\n  build(renderState, latestValues, props) {\n    buildSVGAttrs(renderState, latestValues, this.isSVGTag, props.transformTemplate);\n  }\n\n  renderInstance(instance, renderState, styleProp, projection) {\n    renderSVG(instance, renderState, styleProp, projection);\n  }\n\n  mount(instance) {\n    this.isSVGTag = isSVGTag(instance.tagName);\n    super.mount(instance);\n  }\n\n}\n\nexport { SVGVisualElement };","map":{"version":3,"sources":["/Users/gagan/Desktop/sanjeev/someapp/node_modules/framer-motion/dist/es/render/svg/SVGVisualElement.mjs"],"names":["frame","createBox","DOMVisualElement","camelToDash","getDefaultValueType","transformProps","buildSVGAttrs","camelCaseAttributes","isSVGTag","updateSVGDimensions","renderSVG","scrapeMotionValuesFromProps","SVGVisualElement","constructor","arguments","type","measureInstanceViewportBox","updateDimensions","current","renderState","dimensions","getBaseTargetFromProps","props","key","readValueFromInstance","instance","has","defaultType","default","getAttribute","prevProps","visualElement","onBindTransform","postRender","build","latestValues","transformTemplate","renderInstance","styleProp","projection","mount","tagName"],"mappings":"AAAA,SAASA,KAAT,QAAsB,YAAtB;AACA,SAASC,SAAT,QAA0B,sCAA1B;AACA,SAASC,gBAAT,QAAiC,6BAAjC;AACA,SAASC,WAAT,QAA4B,gCAA5B;AACA,SAASC,mBAAT,QAAoC,iCAApC;AACA,SAASC,cAAT,QAA+B,kCAA/B;AACA,SAASC,aAAT,QAA8B,yBAA9B;AACA,SAASC,mBAAT,QAAoC,8BAApC;AACA,SAASC,QAAT,QAAyB,wBAAzB;AACA,SAASC,mBAAT,QAAoC,qBAApC;AACA,SAASC,SAAT,QAA0B,oBAA1B;AACA,SAASC,2BAAT,QAA4C,kCAA5C;;AAEA,MAAMC,gBAAN,SAA+BV,gBAA/B,CAAgD;AAC5CW,EAAAA,WAAW,GAAG;AACV,UAAM,GAAGC,SAAT;AACA,SAAKC,IAAL,GAAY,KAAZ;AACA,SAAKP,QAAL,GAAgB,KAAhB;AACA,SAAKQ,0BAAL,GAAkCf,SAAlC;;AACA,SAAKgB,gBAAL,GAAwB,MAAM;AAC1B,UAAI,KAAKC,OAAL,IAAgB,CAAC,KAAKC,WAAL,CAAiBC,UAAtC,EAAkD;AAC9CX,QAAAA,mBAAmB,CAAC,KAAKS,OAAN,EAAe,KAAKC,WAApB,CAAnB;AACH;AACJ,KAJD;AAKH;;AACDE,EAAAA,sBAAsB,CAACC,KAAD,EAAQC,GAAR,EAAa;AAC/B,WAAOD,KAAK,CAACC,GAAD,CAAZ;AACH;;AACDC,EAAAA,qBAAqB,CAACC,QAAD,EAAWF,GAAX,EAAgB;AACjC,QAAIlB,cAAc,CAACqB,GAAf,CAAmBH,GAAnB,CAAJ,EAA6B;AACzB,YAAMI,WAAW,GAAGvB,mBAAmB,CAACmB,GAAD,CAAvC;AACA,aAAOI,WAAW,GAAGA,WAAW,CAACC,OAAZ,IAAuB,CAA1B,GAA8B,CAAhD;AACH;;AACDL,IAAAA,GAAG,GAAG,CAAChB,mBAAmB,CAACmB,GAApB,CAAwBH,GAAxB,CAAD,GAAgCpB,WAAW,CAACoB,GAAD,CAA3C,GAAmDA,GAAzD;AACA,WAAOE,QAAQ,CAACI,YAAT,CAAsBN,GAAtB,CAAP;AACH;;AACDZ,EAAAA,2BAA2B,CAACW,KAAD,EAAQQ,SAAR,EAAmBC,aAAnB,EAAkC;AACzD,WAAOpB,2BAA2B,CAACW,KAAD,EAAQQ,SAAR,EAAmBC,aAAnB,CAAlC;AACH;;AACDC,EAAAA,eAAe,GAAG;AACd,QAAI,KAAKd,OAAL,IAAgB,CAAC,KAAKC,WAAL,CAAiBC,UAAtC,EAAkD;AAC9CpB,MAAAA,KAAK,CAACiC,UAAN,CAAiB,KAAKhB,gBAAtB;AACH;AACJ;;AACDiB,EAAAA,KAAK,CAACf,WAAD,EAAcgB,YAAd,EAA4Bb,KAA5B,EAAmC;AACpChB,IAAAA,aAAa,CAACa,WAAD,EAAcgB,YAAd,EAA4B,KAAK3B,QAAjC,EAA2Cc,KAAK,CAACc,iBAAjD,CAAb;AACH;;AACDC,EAAAA,cAAc,CAACZ,QAAD,EAAWN,WAAX,EAAwBmB,SAAxB,EAAmCC,UAAnC,EAA+C;AACzD7B,IAAAA,SAAS,CAACe,QAAD,EAAWN,WAAX,EAAwBmB,SAAxB,EAAmCC,UAAnC,CAAT;AACH;;AACDC,EAAAA,KAAK,CAACf,QAAD,EAAW;AACZ,SAAKjB,QAAL,GAAgBA,QAAQ,CAACiB,QAAQ,CAACgB,OAAV,CAAxB;AACA,UAAMD,KAAN,CAAYf,QAAZ;AACH;;AAxC2C;;AA2ChD,SAASb,gBAAT","sourcesContent":["import { frame } from 'motion-dom';\nimport { createBox } from '../../projection/geometry/models.mjs';\nimport { DOMVisualElement } from '../dom/DOMVisualElement.mjs';\nimport { camelToDash } from '../dom/utils/camel-to-dash.mjs';\nimport { getDefaultValueType } from '../dom/value-types/defaults.mjs';\nimport { transformProps } from '../html/utils/keys-transform.mjs';\nimport { buildSVGAttrs } from './utils/build-attrs.mjs';\nimport { camelCaseAttributes } from './utils/camel-case-attrs.mjs';\nimport { isSVGTag } from './utils/is-svg-tag.mjs';\nimport { updateSVGDimensions } from './utils/measure.mjs';\nimport { renderSVG } from './utils/render.mjs';\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\n\nclass SVGVisualElement extends DOMVisualElement {\n    constructor() {\n        super(...arguments);\n        this.type = \"svg\";\n        this.isSVGTag = false;\n        this.measureInstanceViewportBox = createBox;\n        this.updateDimensions = () => {\n            if (this.current && !this.renderState.dimensions) {\n                updateSVGDimensions(this.current, this.renderState);\n            }\n        };\n    }\n    getBaseTargetFromProps(props, key) {\n        return props[key];\n    }\n    readValueFromInstance(instance, key) {\n        if (transformProps.has(key)) {\n            const defaultType = getDefaultValueType(key);\n            return defaultType ? defaultType.default || 0 : 0;\n        }\n        key = !camelCaseAttributes.has(key) ? camelToDash(key) : key;\n        return instance.getAttribute(key);\n    }\n    scrapeMotionValuesFromProps(props, prevProps, visualElement) {\n        return scrapeMotionValuesFromProps(props, prevProps, visualElement);\n    }\n    onBindTransform() {\n        if (this.current && !this.renderState.dimensions) {\n            frame.postRender(this.updateDimensions);\n        }\n    }\n    build(renderState, latestValues, props) {\n        buildSVGAttrs(renderState, latestValues, this.isSVGTag, props.transformTemplate);\n    }\n    renderInstance(instance, renderState, styleProp, projection) {\n        renderSVG(instance, renderState, styleProp, projection);\n    }\n    mount(instance) {\n        this.isSVGTag = isSVGTag(instance.tagName);\n        super.mount(instance);\n    }\n}\n\nexport { SVGVisualElement };\n"]},"metadata":{},"sourceType":"module"}