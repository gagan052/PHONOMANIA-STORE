{"ast":null,"code":"import { press, frame } from 'motion-dom';\nimport { extractEventInfo } from '../events/event-info.mjs';\nimport { Feature } from '../motion/features/Feature.mjs';\n\nfunction handlePressEvent(node, event, lifecycle) {\n  const {\n    props\n  } = node;\n\n  if (node.current instanceof HTMLButtonElement && node.current.disabled) {\n    return;\n  }\n\n  if (node.animationState && props.whileTap) {\n    node.animationState.setActive(\"whileTap\", lifecycle === \"Start\");\n  }\n\n  const eventName = \"onTap\" + (lifecycle === \"End\" ? \"\" : lifecycle);\n  const callback = props[eventName];\n\n  if (callback) {\n    frame.postRender(() => callback(event, extractEventInfo(event)));\n  }\n}\n\nclass PressGesture extends Feature {\n  mount() {\n    const {\n      current\n    } = this.node;\n    if (!current) return;\n    this.unmount = press(current, (_element, startEvent) => {\n      handlePressEvent(this.node, startEvent, \"Start\");\n      return (endEvent, _ref) => {\n        let {\n          success\n        } = _ref;\n        return handlePressEvent(this.node, endEvent, success ? \"End\" : \"Cancel\");\n      };\n    }, {\n      useGlobalTarget: this.node.props.globalTapTarget\n    });\n  }\n\n  unmount() {}\n\n}\n\nexport { PressGesture };","map":{"version":3,"sources":["/Users/gagan/Desktop/sanjeev/someapp/node_modules/framer-motion/dist/es/gestures/press.mjs"],"names":["press","frame","extractEventInfo","Feature","handlePressEvent","node","event","lifecycle","props","current","HTMLButtonElement","disabled","animationState","whileTap","setActive","eventName","callback","postRender","PressGesture","mount","unmount","_element","startEvent","endEvent","success","useGlobalTarget","globalTapTarget"],"mappings":"AAAA,SAASA,KAAT,EAAgBC,KAAhB,QAA6B,YAA7B;AACA,SAASC,gBAAT,QAAiC,0BAAjC;AACA,SAASC,OAAT,QAAwB,gCAAxB;;AAEA,SAASC,gBAAT,CAA0BC,IAA1B,EAAgCC,KAAhC,EAAuCC,SAAvC,EAAkD;AAC9C,QAAM;AAAEC,IAAAA;AAAF,MAAYH,IAAlB;;AACA,MAAIA,IAAI,CAACI,OAAL,YAAwBC,iBAAxB,IAA6CL,IAAI,CAACI,OAAL,CAAaE,QAA9D,EAAwE;AACpE;AACH;;AACD,MAAIN,IAAI,CAACO,cAAL,IAAuBJ,KAAK,CAACK,QAAjC,EAA2C;AACvCR,IAAAA,IAAI,CAACO,cAAL,CAAoBE,SAApB,CAA8B,UAA9B,EAA0CP,SAAS,KAAK,OAAxD;AACH;;AACD,QAAMQ,SAAS,GAAI,WAAWR,SAAS,KAAK,KAAd,GAAsB,EAAtB,GAA2BA,SAAtC,CAAnB;AACA,QAAMS,QAAQ,GAAGR,KAAK,CAACO,SAAD,CAAtB;;AACA,MAAIC,QAAJ,EAAc;AACVf,IAAAA,KAAK,CAACgB,UAAN,CAAiB,MAAMD,QAAQ,CAACV,KAAD,EAAQJ,gBAAgB,CAACI,KAAD,CAAxB,CAA/B;AACH;AACJ;;AACD,MAAMY,YAAN,SAA2Bf,OAA3B,CAAmC;AAC/BgB,EAAAA,KAAK,GAAG;AACJ,UAAM;AAAEV,MAAAA;AAAF,QAAc,KAAKJ,IAAzB;AACA,QAAI,CAACI,OAAL,EACI;AACJ,SAAKW,OAAL,GAAepB,KAAK,CAACS,OAAD,EAAU,CAACY,QAAD,EAAWC,UAAX,KAA0B;AACpDlB,MAAAA,gBAAgB,CAAC,KAAKC,IAAN,EAAYiB,UAAZ,EAAwB,OAAxB,CAAhB;AACA,aAAO,CAACC,QAAD;AAAA,YAAW;AAAEC,UAAAA;AAAF,SAAX;AAAA,eAA2BpB,gBAAgB,CAAC,KAAKC,IAAN,EAAYkB,QAAZ,EAAsBC,OAAO,GAAG,KAAH,GAAW,QAAxC,CAA3C;AAAA,OAAP;AACH,KAHmB,EAGjB;AAAEC,MAAAA,eAAe,EAAE,KAAKpB,IAAL,CAAUG,KAAV,CAAgBkB;AAAnC,KAHiB,CAApB;AAIH;;AACDN,EAAAA,OAAO,GAAG,CAAG;;AAVkB;;AAanC,SAASF,YAAT","sourcesContent":["import { press, frame } from 'motion-dom';\nimport { extractEventInfo } from '../events/event-info.mjs';\nimport { Feature } from '../motion/features/Feature.mjs';\n\nfunction handlePressEvent(node, event, lifecycle) {\n    const { props } = node;\n    if (node.current instanceof HTMLButtonElement && node.current.disabled) {\n        return;\n    }\n    if (node.animationState && props.whileTap) {\n        node.animationState.setActive(\"whileTap\", lifecycle === \"Start\");\n    }\n    const eventName = (\"onTap\" + (lifecycle === \"End\" ? \"\" : lifecycle));\n    const callback = props[eventName];\n    if (callback) {\n        frame.postRender(() => callback(event, extractEventInfo(event)));\n    }\n}\nclass PressGesture extends Feature {\n    mount() {\n        const { current } = this.node;\n        if (!current)\n            return;\n        this.unmount = press(current, (_element, startEvent) => {\n            handlePressEvent(this.node, startEvent, \"Start\");\n            return (endEvent, { success }) => handlePressEvent(this.node, endEvent, success ? \"End\" : \"Cancel\");\n        }, { useGlobalTarget: this.node.props.globalTapTarget });\n    }\n    unmount() { }\n}\n\nexport { PressGesture };\n"]},"metadata":{},"sourceType":"module"}